{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport fadeBackground from \"../components/modals/FadeBackground\";\nconst initialState = {\n  modals: {},\n  // 등록된 모달들\n  modalStack: [],\n  // 모달의 이름만 저장\n  fadeBackground: false // 열린 페이지가 흐린 화면 처리\n};\nconst modalStackSlice = createSlice({\n  name: 'modalStack',\n  initialState,\n  reducers: {\n    // 모달을 사용하려면, 등록해야 함\n    registerModal: (state, action) => {\n      const {\n        modalName,\n        modalClear,\n        setModalShow,\n        setModalInfo\n      } = action.payload;\n      if (!state.modals[modalName]) state.modals[modalName] = {\n        'modalName': modalName,\n        'modalClear': modalClear,\n        'setModalShow': setModalShow,\n        'setModalInfo': setModalInfo\n      };\n    },\n    // 모달을 띄워줌\n    showModal: (state, action) => {\n      const modalName = action.payload;\n      if (!state.modals[modalName]) throw new Error(`등록되지 않은 모달 '${modalName}'`);\n\n      // 스택에 해당 모달이 있다면 제거(중복 방지 : 뒤로가기시 같은 모달이 나오는 경우)\n      state.modalStack = state.modalStack.filter(modal => modal.modalName !== modalName);\n\n      // 만약 현재 열린 모달을 제외하고, 이전에 열린 모달(들)이 존재할 경우, z-index 처리와 fade 처리\n      for (let i = 0; i < state.modalStack.length; i++) state.modalStack[i].setModalInfo({\n        'fade': true,\n        'z': (i + 2) * 10\n      });\n\n      // 스택에 모달 푸시\n      state.modalStack.push(state.modals[modalName]);\n\n      // 모달 z-index 처리와 fade 처리\n      state.modalStack[state.modalStack.length - 1].setModalInfo({\n        'fade': false,\n        'z': (state.modalStack.length + 1) * 10\n      });\n\n      // 뒷배경 블러처리\n      state.fadeBackground = true;\n\n      // 모달 보이게 하기\n      state.modalStack[state.modalStack.length - 1].setModalShow(true);\n    },\n    // 가장 나중에 뜬 모달을 닫아줌\n    popModal: state => {\n      // 모달이 없는데 닫으려 하는 경우는 처리하지 않기\n      if (state.modalStack.length == 0) return;\n\n      // 맨 위 모달을 pop\n      let topModal = state.modalStack.pop();\n\n      // 맨 위 모달을 안 보이게 하기\n      topModal.setModalShow(false);\n\n      // 맨 위 모달에 들어있는 정보 초기화시키기\n      topModal.modalClear();\n\n      // 만약 열려 있던 모달이 있다면, 활성화시키기\n      if (state.modalStack.length > 0) state.modalStack[state.modalStack.length - 1].setModalInfo({\n        'fade': false,\n        'z': (state.modalStack.length + 1) * 10\n      });\n      // 만약 열려 있는 모달이 없을 경우, 뒷배경 블러처리 해제\n      else state.fadeBackground = false;\n    }\n  }\n});\nexport const {\n  registerModal,\n  showModal,\n  popModal\n} = modalStackSlice.actions;\nexport default modalStackSlice.reducer;","map":{"version":3,"names":["createSlice","fadeBackground","initialState","modals","modalStack","modalStackSlice","name","reducers","registerModal","state","action","modalName","modalClear","setModalShow","setModalInfo","payload","showModal","Error","filter","modal","i","length","push","popModal","topModal","pop","actions","reducer"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/redux/modalStackSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport fadeBackground from \"../components/modals/FadeBackground\";\n\nconst initialState = \n{\n    modals : {},     // 등록된 모달들\n    modalStack : [], // 모달의 이름만 저장\n    fadeBackground : false // 열린 페이지가 흐린 화면 처리\n};\n\nconst modalStackSlice = createSlice(\n    {\n        name : 'modalStack',\n        initialState,\n        reducers :\n        {\n            // 모달을 사용하려면, 등록해야 함\n            registerModal : (state, action) =>\n            {\n                const { modalName, modalClear, setModalShow, setModalInfo } = action.payload;\n                if (!state.modals[modalName]) state.modals[modalName] = { 'modalName' : modalName, 'modalClear' : modalClear, 'setModalShow' : setModalShow, 'setModalInfo' : setModalInfo };\n            },\n\n            // 모달을 띄워줌\n            showModal : (state, action) =>\n            {\n                const modalName = action.payload;\n                if (!state.modals[modalName]) throw new Error(`등록되지 않은 모달 '${modalName}'`);\n                \n                // 스택에 해당 모달이 있다면 제거(중복 방지 : 뒤로가기시 같은 모달이 나오는 경우)\n                state.modalStack = state.modalStack.filter( (modal) => modal.modalName !== modalName);\n\n                // 만약 현재 열린 모달을 제외하고, 이전에 열린 모달(들)이 존재할 경우, z-index 처리와 fade 처리\n                for (let i=0; i < state.modalStack.length; i++) state.modalStack[i].setModalInfo({ 'fade' : true, 'z' : (i+2)*10 });\n\n                // 스택에 모달 푸시\n                state.modalStack.push(state.modals[modalName]);\n\n                // 모달 z-index 처리와 fade 처리\n                state.modalStack[state.modalStack.length-1].setModalInfo({ 'fade' : false, 'z' : (state.modalStack.length+1)*10 })\n\n                // 뒷배경 블러처리\n                state.fadeBackground = true;\n\n                // 모달 보이게 하기\n                state.modalStack[state.modalStack.length-1].setModalShow(true);\n            },\n\n            // 가장 나중에 뜬 모달을 닫아줌\n            popModal : (state) =>\n            {\n                // 모달이 없는데 닫으려 하는 경우는 처리하지 않기\n                if (state.modalStack.length == 0) return;\n\n                // 맨 위 모달을 pop\n                let topModal = state.modalStack.pop();\n\n                // 맨 위 모달을 안 보이게 하기\n                topModal.setModalShow(false);\n\n                // 맨 위 모달에 들어있는 정보 초기화시키기\n                topModal.modalClear();\n                \n                // 만약 열려 있던 모달이 있다면, 활성화시키기\n                if (state.modalStack.length > 0) state.modalStack[state.modalStack.length-1].setModalInfo({ 'fade' : false, 'z' : (state.modalStack.length+1)*10 });\n                // 만약 열려 있는 모달이 없을 경우, 뒷배경 블러처리 해제\n                else state.fadeBackground = false;\n\n            }\n        },\n    }\n);\n\nexport const { registerModal, showModal, popModal } = modalStackSlice.actions;\nexport default modalStackSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}