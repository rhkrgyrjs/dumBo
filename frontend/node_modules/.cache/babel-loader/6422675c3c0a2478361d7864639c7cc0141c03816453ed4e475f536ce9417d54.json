{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/src/components/PostTemp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\"; // React와 useState 훅을 불러옴\nimport { Editor } from \"react-draft-wysiwyg\"; // WYSIWYG 에디터 컴포넌트 임포트\nimport { EditorState, convertToRaw } from \"draft-js\"; // 에디터 상태 관리 및 내용을 raw 객체로 변환하는 함수\nimport draftToHtml from \"draftjs-to-html\"; // draft-js의 raw content를 HTML 문자열로 변환해주는 라이브러리\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\"; // 에디터 스타일시트 임포트\nimport DOMPurify from \"dompurify\"; // 서버로 날릴 HTML의 보안 위협을 막기 위해\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostTemp = () => {\n  _s();\n  // 에디터 상태를 관리 (초기값은 빈 에디터 상태)\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // 업로드한 이미지 파일 목록을 상태로 관리, 각 아이템은 {file, localUrl} 객체 형태\n  const [imageFiles, setImageFiles] = useState([]);\n\n  // 에디터 상태가 변할 때마다 호출되는 콜백 함수\n  const onEditorStateChange = state => {\n    setEditorState(state); // 변경된 에디터 상태로 업데이트\n  };\n\n  // 이미지 업로드 콜백 함수 (에디터 내 이미지 삽입시 호출됨)\n  // 여기서는 서버 업로드 대신 브라우저 내 임시 로컬 URL을 생성하여 미리보기용으로 사용\n  const uploadImageCallback = file => {\n    // File 객체에서 로컬 URL 생성 (브라우저 내 임시 URL)\n    const localUrl = URL.createObjectURL(file);\n\n    // 이미지 파일 상태 배열에 새 이미지 추가\n    setImageFiles(prev => [...prev, {\n      file,\n      localUrl\n    }]);\n\n    // Promise 형태로 {data: {link: localUrl}} 반환해야 에디터가 인식함\n    return Promise.resolve({\n      data: {\n        link: localUrl\n      }\n    });\n  };\n\n  // 실제 서버로 이미지를 업로드하는 함수 (handleSubmit에서 사용)\n  const uploadImageToServer = async file => {\n    // FormData 객체 생성, key: \"image\", value: 파일\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    // 이미지 업로드 API 호출 (POST)\n    const res = await fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData\n    });\n\n    // HTTP 응답 상태가 OK가 아니면 에러 던짐\n    if (!res.ok) throw new Error(\"이미지 업로드 실패\");\n\n    // JSON 응답 파싱\n    const data = await res.json();\n\n    // 서버에서 URL을 받지 못하면 에러 던짐\n    if (!data.url) throw new Error(\"서버에서 URL을 받지 못함\");\n\n    // 서버에서 받은 이미지 URL 반환\n    return data.url;\n  };\n\n  // 글 작성 완료 시 호출되는 함수\n  const handleSubmit = async () => {\n    try {\n      // 에디터의 현재 내용(ContentState) 가져오기\n      const contentState = editorState.getCurrentContent();\n\n      // contentState를 raw JS 객체로 변환 (entityMap 포함)\n      let rawContent = convertToRaw(contentState);\n\n      // rawContent 내 entityMap (이미지 등 리소스 정보 포함)\n      const entityMap = rawContent.entityMap;\n\n      // 로컬 이미지 URL과 서버 업로드 후 URL을 매핑할 객체\n      const urlMap = {};\n\n      // entityMap을 순회하며 이미지 엔티티를 찾음\n      for (let key in entityMap) {\n        const entity = entityMap[key];\n\n        // 엔티티 타입이 IMAGE인 경우에만 처리\n        if (entity.type === \"IMAGE\") {\n          const localSrc = entity.data.src; // 로컬 URL 추출\n\n          // imageFiles 상태에서 로컬 URL과 일치하는 이미지 객체 찾기\n          const imgObj = imageFiles.find(img => img.localUrl === localSrc);\n          if (imgObj) {\n            // 서버로 이미지 업로드 후 URL 받기\n            const serverUrl = await uploadImageToServer(imgObj.file);\n\n            // URL 매핑 저장 (로컬 URL -> 서버 URL)\n            urlMap[localSrc] = serverUrl;\n\n            // entityMap 내 이미지 src를 서버 URL로 교체\n            entityMap[key].data.src = serverUrl;\n          }\n        }\n      }\n\n      // entityMap이 바뀐 rawContent를 HTML로 변환\n      const htmlContent = draftToHtml(rawContent);\n\n      // 디버깅용 콘솔 출력 (로컬 URL과 서버 URL 매핑 정보)\n      console.log(\"이미지 URL 맵:\", urlMap);\n      // 변환된 HTML 내용 출력\n      console.log(\"작성된 HTML:\", htmlContent);\n\n      // 이미지 출처도 한번 거르기============================================\n\n      console.log(\"안전하게 변환된 HTML\", DOMPurify.sanitize(htmlContent));\n\n      // 완료 메시지 표시\n      alert(\"글 작성이 완료되었습니다!\");\n\n      // 에디터 초기화 (빈 상태로 리셋)\n      setEditorState(EditorState.createEmpty());\n\n      // 이미지 파일 상태도 초기화\n      setImageFiles([]);\n    } catch (error) {\n      // 에러 발생 시 콘솔 출력 및 알림\n      console.error(\"글 작성 실패:\", error);\n      alert(\"글 작성 중 오류가 발생했습니다.\");\n    }\n  };\n\n  // 이미지 블록 렌더러 함수 (에디터가 특정 블록을 어떻게 렌더할지 결정)\n  const imageBlockRenderer = contentBlock => {\n    // atomic 타입 블록이면 이미지 컴포넌트로 렌더링\n    if (contentBlock.getType() === \"atomic\") {\n      return {\n        component: MediaComponent,\n        // 이미지 렌더링 컴포넌트 지정\n        editable: false // 이미지 블록은 편집 불가\n      };\n    }\n    // atomic 블록이 아니면 기본 렌더러 사용\n    return null;\n  };\n\n  // 이미지 렌더링 컴포넌트 정의\n  const MediaComponent = props => {\n    // 에디터 상태에서 엔티티 데이터 가져오기\n    const entity = props.contentState.getEntity(props.block.getEntityAt(0));\n    const {\n      src,\n      alt,\n      height,\n      width\n    } = entity.getData(); // src 등 이미지 정보 추출\n\n    // img 태그로 이미지 렌더링, 스타일로 크기 조절 가능\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: src,\n      alt: alt || \"\",\n      style: {\n        height: height || \"auto\",\n        width: width || \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 800,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState // 현재 에디터 상태 전달\n      ,\n      onEditorStateChange: onEditorStateChange // 상태 변경 콜백 지정\n      ,\n      wrapperClassName: \"demo-wrapper\" // 에디터 래퍼 CSS 클래스 지정\n      ,\n      editorClassName: \"demo-editor\" // 에디터 영역 CSS 클래스 지정\n\n      // 툴바 옵션 설정 (한글 타이틀 포함)\n      ,\n      toolbar: {\n        options: [\"inline\", \"blockType\", \"fontSize\", \"fontFamily\", \"list\", \"textAlign\", \"colorPicker\", \"link\", \"emoji\", \"image\", \"remove\", \"history\"],\n        inline: {\n          options: [\"bold\", \"italic\", \"underline\", \"strikethrough\", \"monospace\"],\n          bold: {\n            title: \"굵게\"\n          },\n          italic: {\n            title: \"기울임\"\n          },\n          underline: {\n            title: \"밑줄\"\n          },\n          strikethrough: {\n            title: \"취소선\"\n          },\n          monospace: {\n            title: \"고정폭\"\n          }\n        },\n        blockType: {\n          options: [\"Normal\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"Blockquote\", \"Code\"],\n          dropdownClassName: \"rdw-dropdown\",\n          normal: {\n            label: \"기본\"\n          },\n          h1: {\n            label: \"제목1\"\n          },\n          h2: {\n            label: \"제목2\"\n          },\n          h3: {\n            label: \"제목3\"\n          },\n          h4: {\n            label: \"제목4\"\n          },\n          h5: {\n            label: \"제목5\"\n          },\n          h6: {\n            label: \"제목6\"\n          },\n          blockquote: {\n            label: \"인용문\"\n          },\n          code: {\n            label: \"코드\"\n          }\n        },\n        fontSize: {\n          options: [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96],\n          title: \"글자 크기\"\n        },\n        fontFamily: {\n          options: [\"Arial\", \"Georgia\", \"Impact\", \"Tahoma\", \"Times New Roman\", \"Verdana\"],\n          title: \"글꼴\"\n        },\n        list: {\n          options: [\"unordered\", \"ordered\"],\n          unordered: {\n            title: \"글머리 기호\"\n          },\n          ordered: {\n            title: \"번호 매기기\"\n          }\n        },\n        textAlign: {\n          options: [\"left\", \"center\", \"right\", \"justify\"],\n          left: {\n            title: \"왼쪽 정렬\"\n          },\n          center: {\n            title: \"가운데 정렬\"\n          },\n          right: {\n            title: \"오른쪽 정렬\"\n          },\n          justify: {\n            title: \"양쪽 정렬\"\n          }\n        },\n        colorPicker: {\n          title: \"글자 색상\"\n        },\n        link: {\n          options: [\"link\", \"unlink\"],\n          link: {\n            title: \"링크 삽입\"\n          },\n          unlink: {\n            title: \"링크 제거\"\n          }\n        },\n        emoji: {\n          title: \"이모지\"\n        },\n        image: {\n          uploadCallback: uploadImageCallback,\n          // 이미지 업로드 시 호출되는 콜백 (로컬 미리보기용)\n          previewImage: true,\n          // 미리보기 기능 활성화\n          alt: {\n            present: true,\n            mandatory: false\n          },\n          // alt 태그 입력 옵션 활성화\n          title: \"이미지 업로드\",\n          // 이미지 버튼 툴팁\n          uploadEnabled: true,\n          // 로컬 업로드 허용\n          urlEnabled: false // URL 삽입 비활성화\n        },\n        remove: {\n          title: \"서식 제거\"\n        },\n        history: {\n          options: [\"undo\", \"redo\"],\n          undo: {\n            title: \"되돌리기\"\n          },\n          redo: {\n            title: \"되돌리기 취소\"\n          }\n        }\n      }\n\n      // 이미지 atomic 블록에 대해 커스텀 렌더링 함수 지정\n      ,\n      customBlockRenderFunc: imageBlockRenderer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: 20,\n        padding: \"10px 20px\",\n        backgroundColor: \"#4F46E5\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: 5,\n        cursor: \"pointer\"\n      },\n      onClick: handleSubmit // 클릭 시 글 작성 완료 함수 실행\n      ,\n      children: \"\\uAE00 \\uC5C5\\uB85C\\uB4DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(PostTemp, \"Y6cjcXezSMW/39rWyEt1GHr/wao=\");\n_c = PostTemp;\nexport default PostTemp;\nvar _c;\n$RefreshReg$(_c, \"PostTemp\");","map":{"version":3,"names":["React","useState","Editor","EditorState","convertToRaw","draftToHtml","DOMPurify","jsxDEV","_jsxDEV","PostTemp","_s","editorState","setEditorState","createEmpty","imageFiles","setImageFiles","onEditorStateChange","state","uploadImageCallback","file","localUrl","URL","createObjectURL","prev","Promise","resolve","data","link","uploadImageToServer","formData","FormData","append","res","fetch","method","body","ok","Error","json","url","handleSubmit","contentState","getCurrentContent","rawContent","entityMap","urlMap","key","entity","type","localSrc","src","imgObj","find","img","serverUrl","htmlContent","console","log","sanitize","alert","error","imageBlockRenderer","contentBlock","getType","component","MediaComponent","editable","props","getEntity","block","getEntityAt","alt","height","width","getData","style","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","margin","children","wrapperClassName","editorClassName","toolbar","options","inline","bold","title","italic","underline","strikethrough","monospace","blockType","dropdownClassName","normal","label","h1","h2","h3","h4","h5","h6","blockquote","code","fontSize","fontFamily","list","unordered","ordered","textAlign","left","center","right","justify","colorPicker","unlink","emoji","image","uploadCallback","previewImage","present","mandatory","uploadEnabled","urlEnabled","remove","history","undo","redo","customBlockRenderFunc","marginTop","padding","backgroundColor","color","border","borderRadius","cursor","onClick","_c","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/components/PostTemp.js"],"sourcesContent":["import React, { useState } from \"react\"; // React와 useState 훅을 불러옴\nimport { Editor } from \"react-draft-wysiwyg\"; // WYSIWYG 에디터 컴포넌트 임포트\nimport { EditorState, convertToRaw } from \"draft-js\"; // 에디터 상태 관리 및 내용을 raw 객체로 변환하는 함수\nimport draftToHtml from \"draftjs-to-html\"; // draft-js의 raw content를 HTML 문자열로 변환해주는 라이브러리\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\"; // 에디터 스타일시트 임포트\nimport DOMPurify from \"dompurify\"; // 서버로 날릴 HTML의 보안 위협을 막기 위해\n\nconst PostTemp = () => {\n  // 에디터 상태를 관리 (초기값은 빈 에디터 상태)\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // 업로드한 이미지 파일 목록을 상태로 관리, 각 아이템은 {file, localUrl} 객체 형태\n  const [imageFiles, setImageFiles] = useState([]);\n\n  // 에디터 상태가 변할 때마다 호출되는 콜백 함수\n  const onEditorStateChange = (state) => {\n    setEditorState(state); // 변경된 에디터 상태로 업데이트\n  };\n\n  // 이미지 업로드 콜백 함수 (에디터 내 이미지 삽입시 호출됨)\n  // 여기서는 서버 업로드 대신 브라우저 내 임시 로컬 URL을 생성하여 미리보기용으로 사용\n  const uploadImageCallback = (file) => {\n    // File 객체에서 로컬 URL 생성 (브라우저 내 임시 URL)\n    const localUrl = URL.createObjectURL(file);\n\n    // 이미지 파일 상태 배열에 새 이미지 추가\n    setImageFiles((prev) => [...prev, { file, localUrl }]);\n\n    // Promise 형태로 {data: {link: localUrl}} 반환해야 에디터가 인식함\n    return Promise.resolve({ data: { link: localUrl } });\n  };\n\n  // 실제 서버로 이미지를 업로드하는 함수 (handleSubmit에서 사용)\n  const uploadImageToServer = async (file) => {\n    // FormData 객체 생성, key: \"image\", value: 파일\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    // 이미지 업로드 API 호출 (POST)\n    const res = await fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData,\n    });\n\n    // HTTP 응답 상태가 OK가 아니면 에러 던짐\n    if (!res.ok) throw new Error(\"이미지 업로드 실패\");\n\n    // JSON 응답 파싱\n    const data = await res.json();\n\n    // 서버에서 URL을 받지 못하면 에러 던짐\n    if (!data.url) throw new Error(\"서버에서 URL을 받지 못함\");\n\n    // 서버에서 받은 이미지 URL 반환\n    return data.url;\n  };\n\n  // 글 작성 완료 시 호출되는 함수\n  const handleSubmit = async () => {\n    try {\n      // 에디터의 현재 내용(ContentState) 가져오기\n      const contentState = editorState.getCurrentContent();\n\n      // contentState를 raw JS 객체로 변환 (entityMap 포함)\n      let rawContent = convertToRaw(contentState);\n\n      // rawContent 내 entityMap (이미지 등 리소스 정보 포함)\n      const entityMap = rawContent.entityMap;\n\n      // 로컬 이미지 URL과 서버 업로드 후 URL을 매핑할 객체\n      const urlMap = {};\n\n      // entityMap을 순회하며 이미지 엔티티를 찾음\n      for (let key in entityMap) {\n        const entity = entityMap[key];\n\n        // 엔티티 타입이 IMAGE인 경우에만 처리\n        if (entity.type === \"IMAGE\") {\n          const localSrc = entity.data.src; // 로컬 URL 추출\n\n          // imageFiles 상태에서 로컬 URL과 일치하는 이미지 객체 찾기\n          const imgObj = imageFiles.find((img) => img.localUrl === localSrc);\n\n          if (imgObj) {\n            // 서버로 이미지 업로드 후 URL 받기\n            const serverUrl = await uploadImageToServer(imgObj.file);\n\n            // URL 매핑 저장 (로컬 URL -> 서버 URL)\n            urlMap[localSrc] = serverUrl;\n\n            // entityMap 내 이미지 src를 서버 URL로 교체\n            entityMap[key].data.src = serverUrl;\n          }\n        }\n      }\n\n      // entityMap이 바뀐 rawContent를 HTML로 변환\n      const htmlContent = draftToHtml(rawContent);\n\n      // 디버깅용 콘솔 출력 (로컬 URL과 서버 URL 매핑 정보)\n      console.log(\"이미지 URL 맵:\", urlMap);\n      // 변환된 HTML 내용 출력\n      console.log(\"작성된 HTML:\", htmlContent);\n\n      // 이미지 출처도 한번 거르기============================================\n\n      console.log(\"안전하게 변환된 HTML\", DOMPurify.sanitize(htmlContent));\n\n      // 완료 메시지 표시\n      alert(\"글 작성이 완료되었습니다!\");\n\n      // 에디터 초기화 (빈 상태로 리셋)\n      setEditorState(EditorState.createEmpty());\n\n      // 이미지 파일 상태도 초기화\n      setImageFiles([]);\n    } catch (error) {\n      // 에러 발생 시 콘솔 출력 및 알림\n      console.error(\"글 작성 실패:\", error);\n      alert(\"글 작성 중 오류가 발생했습니다.\");\n    }\n  };\n\n  // 이미지 블록 렌더러 함수 (에디터가 특정 블록을 어떻게 렌더할지 결정)\n  const imageBlockRenderer = (contentBlock) => {\n    // atomic 타입 블록이면 이미지 컴포넌트로 렌더링\n    if (contentBlock.getType() === \"atomic\") {\n      return {\n        component: MediaComponent, // 이미지 렌더링 컴포넌트 지정\n        editable: false, // 이미지 블록은 편집 불가\n      };\n    }\n    // atomic 블록이 아니면 기본 렌더러 사용\n    return null;\n  };\n\n  // 이미지 렌더링 컴포넌트 정의\n  const MediaComponent = (props) => {\n    // 에디터 상태에서 엔티티 데이터 가져오기\n    const entity = props.contentState.getEntity(props.block.getEntityAt(0));\n    const { src, alt, height, width } = entity.getData(); // src 등 이미지 정보 추출\n\n    // img 태그로 이미지 렌더링, 스타일로 크기 조절 가능\n    return (\n      <img\n        src={src}\n        alt={alt || \"\"}\n        style={{ height: height || \"auto\", width: width || \"auto\" }}\n      />\n    );\n  };\n\n  return (\n    <div style={{ maxWidth: 800, margin: \"auto\" }}>\n      <h2>게시글 작성</h2>\n\n      {/* 에디터 컴포넌트 */}\n      <Editor\n        editorState={editorState} // 현재 에디터 상태 전달\n        onEditorStateChange={onEditorStateChange} // 상태 변경 콜백 지정\n        wrapperClassName=\"demo-wrapper\" // 에디터 래퍼 CSS 클래스 지정\n        editorClassName=\"demo-editor\" // 에디터 영역 CSS 클래스 지정\n\n        // 툴바 옵션 설정 (한글 타이틀 포함)\n        toolbar={{\n          options: [\n            \"inline\",\n            \"blockType\",\n            \"fontSize\",\n            \"fontFamily\",\n            \"list\",\n            \"textAlign\",\n            \"colorPicker\",\n            \"link\",\n            \"emoji\",\n            \"image\",\n            \"remove\",\n            \"history\",\n          ],\n          inline: {\n            options: [\"bold\", \"italic\", \"underline\", \"strikethrough\", \"monospace\"],\n            bold: { title: \"굵게\" },\n            italic: { title: \"기울임\" },\n            underline: { title: \"밑줄\" },\n            strikethrough: { title: \"취소선\" },\n            monospace: { title: \"고정폭\" },\n          },\n          blockType: {\n            options: [\n              \"Normal\",\n              \"H1\",\n              \"H2\",\n              \"H3\",\n              \"H4\",\n              \"H5\",\n              \"H6\",\n              \"Blockquote\",\n              \"Code\",\n            ],\n            dropdownClassName: \"rdw-dropdown\",\n            normal: { label: \"기본\" },\n            h1: { label: \"제목1\" },\n            h2: { label: \"제목2\" },\n            h3: { label: \"제목3\" },\n            h4: { label: \"제목4\" },\n            h5: { label: \"제목5\" },\n            h6: { label: \"제목6\" },\n            blockquote: { label: \"인용문\" },\n            code: { label: \"코드\" },\n          },\n          fontSize: {\n            options: [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96],\n            title: \"글자 크기\",\n          },\n          fontFamily: {\n            options: [\n              \"Arial\",\n              \"Georgia\",\n              \"Impact\",\n              \"Tahoma\",\n              \"Times New Roman\",\n              \"Verdana\",\n            ],\n            title: \"글꼴\",\n          },\n          list: {\n            options: [\"unordered\", \"ordered\"],\n            unordered: { title: \"글머리 기호\" },\n            ordered: { title: \"번호 매기기\" },\n          },\n          textAlign: {\n            options: [\"left\", \"center\", \"right\", \"justify\"],\n            left: { title: \"왼쪽 정렬\" },\n            center: { title: \"가운데 정렬\" },\n            right: { title: \"오른쪽 정렬\" },\n            justify: { title: \"양쪽 정렬\" },\n          },\n          colorPicker: { title: \"글자 색상\" },\n          link: {\n            options: [\"link\", \"unlink\"],\n            link: { title: \"링크 삽입\" },\n            unlink: { title: \"링크 제거\" },\n          },\n          emoji: { title: \"이모지\" },\n          image: {\n            uploadCallback: uploadImageCallback, // 이미지 업로드 시 호출되는 콜백 (로컬 미리보기용)\n            previewImage: true, // 미리보기 기능 활성화\n            alt: { present: true, mandatory: false }, // alt 태그 입력 옵션 활성화\n            title: \"이미지 업로드\", // 이미지 버튼 툴팁\n            uploadEnabled: true,   // 로컬 업로드 허용\n            urlEnabled: false,     // URL 삽입 비활성화\n          },\n          remove: { title: \"서식 제거\" },\n          history: {\n            options: [\"undo\", \"redo\"],\n            undo: { title: \"되돌리기\" },\n            redo: { title: \"되돌리기 취소\" },\n          },\n        }}\n\n        // 이미지 atomic 블록에 대해 커스텀 렌더링 함수 지정\n        customBlockRenderFunc={imageBlockRenderer}\n      />\n\n      {/* 글 업로드 버튼 */}\n      <button\n        style={{\n          marginTop: 20,\n          padding: \"10px 20px\",\n          backgroundColor: \"#4F46E5\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: 5,\n          cursor: \"pointer\",\n        }}\n        onClick={handleSubmit} // 클릭 시 글 작성 완료 함수 실행\n      >\n        글 업로드\n      </button>\n    </div>\n  );\n};\n\nexport default PostTemp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}