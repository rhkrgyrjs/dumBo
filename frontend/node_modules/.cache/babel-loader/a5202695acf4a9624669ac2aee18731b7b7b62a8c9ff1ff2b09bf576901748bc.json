{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/src/components/PostTemp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DOMPurify from \"dompurify\";\nimport { useSelector } from \"react-redux\";\nimport PostRequestWithAccessToken from \"../api/axios/requestWithAccessToken\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateId() {\n  // 간단한 유니크 ID 생성 함수 (랜덤 문자열)\n  return Math.random().toString(36).substring(2, 15);\n}\n\n// 커스텀 이미지 컴포넌트: entity data의 id를 로컬 URL로 변환해서 렌더링\nconst CustomImage = ({\n  contentState,\n  entityKey\n}) => {\n  var _window$localImageMap;\n  const {\n    id\n  } = contentState.getEntity(entityKey).getData();\n  // id → 로컬 URL 매핑\n  const localUrl = ((_window$localImageMap = window.localImageMap) === null || _window$localImageMap === void 0 ? void 0 : _window$localImageMap[id]) || null;\n  if (!localUrl) return null;\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: localUrl,\n    alt: \"uploaded\",\n    style: {\n      maxWidth: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n};\n_c = CustomImage;\nconst PostTemp = () => {\n  _s();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  // {id, file, localUrl} 배열 관리\n  const [imageFiles, setImageFiles] = useState([]);\n  const token = useSelector(state => state.auth.accessToken);\n\n  // 전역에 로컬 URL 맵 만들기 (CustomImage에서 접근 가능하게)\n  useEffect(() => {\n    window.localImageMap = {};\n    imageFiles.forEach(({\n      id,\n      localUrl\n    }) => {\n      window.localImageMap[id] = localUrl;\n    });\n  }, [imageFiles]);\n  const onEditorStateChange = state => {\n    setEditorState(state);\n  };\n  const uploadImageCallback = file => {\n    // 이미지마다 고유 id 생성\n    const id = generateId();\n    const localUrl = URL.createObjectURL(file);\n    setImageFiles(prev => [...prev, {\n      id,\n      file,\n      localUrl\n    }]);\n\n    // entityMap에 id만 넣도록 리턴\n    return Promise.resolve({\n      data: {\n        link: id\n      }\n    });\n  };\n\n  // 서버 업로드 함수 (기존 그대로)\n  const uploadImageToServer = async file => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    const res = await fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData\n    });\n    if (!res.ok) throw new Error(\"이미지 업로드 실패\");\n    const data = await res.json();\n    if (!data.url) throw new Error(\"서버에서 URL을 받지 못함\");\n    return data.url;\n  };\n  const sanitizeHtmlWithImageFilter = dirtyHtml => {\n    // 필요시 필터링 구현 (생략해도 됨)\n    return DOMPurify.sanitize(dirtyHtml);\n  };\n  const handleSubmit = async () => {\n    try {\n      const contentState = editorState.getCurrentContent();\n      let rawContent = convertToRaw(contentState);\n      const entityMap = rawContent.entityMap;\n\n      // id 기준으로 서버 업로드 후 URL 교체\n      for (const key in entityMap) {\n        const entity = entityMap[key];\n        if (entity.type === \"IMAGE\") {\n          const id = entity.data.link; // id를 링크로 넣었으므로\n          const imgObj = imageFiles.find(img => img.id === id);\n          if (imgObj) {\n            const serverUrl = await uploadImageToServer(imgObj.file);\n            entityMap[key].data.link = serverUrl;\n          }\n        }\n      }\n      const htmlContent = draftToHtml(rawContent);\n      const cleanHtml = sanitizeHtmlWithImageFilter(htmlContent);\n      console.log(\"HTML:\", cleanHtml);\n      const titleInput = document.getElementById(\"draft-title\");\n      const res = await PostRequestWithAccessToken(token, \"/post\", {\n        title: (titleInput === null || titleInput === void 0 ? void 0 : titleInput.value) || \"\",\n        content: cleanHtml\n      });\n      console.log(\"작성 완료:\", res.data);\n      alert(\"글 작성이 완료되었습니다!\");\n      setEditorState(EditorState.createEmpty());\n      setImageFiles([]);\n      if (titleInput) titleInput.value = \"\";\n    } catch (error) {\n      console.error(\"글 작성 실패:\", error);\n      alert(\"글 작성 중 오류가 발생했습니다.\");\n    }\n  };\n\n  // entity 타입별 렌더러 (이미지는 커스텀 컴포넌트로 렌더링)\n  const entityRenderer = {\n    IMAGE: props => /*#__PURE__*/_jsxDEV(CustomImage, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 23\n    }, this)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col w-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"draft-title\",\n      placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      className: \"mb-3 p-2 border border-gray-300 rounded focus:border-indigo-300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border rounded-md mb-4 h-[590px] flex flex-col\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        editorState: editorState,\n        onEditorStateChange: onEditorStateChange,\n        wrapperClassName: \"flex flex-col h-full\",\n        toolbarClassName: \"!sticky top-0 z-10 bg-white mb-2\",\n        editorClassName: \"flex-1 overflow-y-auto px-2\",\n        toolbar: {\n          options: [\"inline\", \"colorPicker\", \"blockType\", \"list\", \"textAlign\", \"emoji\", \"image\", \"remove\", \"history\", \"fontFamily\", \"fontSize\"],\n          inline: {\n            options: [\"bold\", \"italic\", \"underline\", \"strikethrough\"],\n            bold: {\n              title: \"굵게\"\n            },\n            italic: {\n              title: \"기울이기\"\n            },\n            underline: {\n              title: \"밑줄\"\n            },\n            strikethrough: {\n              title: \"취소선\"\n            }\n          },\n          blockType: {\n            options: [\"Normal\", \"Blockquote\", \"Code\"]\n          },\n          fontSize: {\n            options: [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96]\n          },\n          fontFamily: {\n            options: [\"Arial\", \"Georgia\", \"Impact\", \"Tahoma\", \"Times New Roman\", \"Verdana\"]\n          },\n          list: {\n            options: [\"unordered\", \"ordered\"]\n          },\n          textAlign: {\n            options: [\"left\", \"center\", \"right\", \"justify\"]\n          },\n          colorPicker: {},\n          link: {\n            options: [\"link\", \"unlink\"]\n          },\n          emoji: {},\n          image: {\n            uploadCallback: uploadImageCallback,\n            previewImage: true,\n            alt: {\n              present: true,\n              mandatory: false\n            },\n            title: \"이미지 업로드\",\n            uploadEnabled: true,\n            urlEnabled: false\n          },\n          remove: {},\n          history: {\n            options: [\"undo\", \"redo\"]\n          }\n        }\n        // entity 커스텀 렌더러 연결\n        ,\n        customBlockRenderFunc: block => {\n          if (block.getType() === \"atomic\") {\n            const contentState = editorState.getCurrentContent();\n            const entityKey = block.getEntityAt(0);\n            if (!entityKey) return null;\n            const entity = contentState.getEntity(entityKey);\n            if (entity.getType() === \"IMAGE\") {\n              return {\n                component: () => /*#__PURE__*/_jsxDEV(CustomImage, {\n                  contentState: contentState,\n                  entityKey: entityKey\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 21\n                }, this),\n                editable: false\n              };\n            }\n          }\n          return null;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-auto flex justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \" px-2 py-2 bg-indigo-500 text-xl rounded-full cursor-pointer hover:bg-indigo-700 \",\n        onClick: handleSubmit,\n        children: \"\\uD83E\\uDEB6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(PostTemp, \"r5Dyf+Wa1pFElrD7b2/B+iq6tfU=\", false, function () {\n  return [useSelector];\n});\n_c2 = PostTemp;\nexport default PostTemp;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomImage\");\n$RefreshReg$(_c2, \"PostTemp\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Editor","EditorState","convertToRaw","Modifier","draftToHtml","DOMPurify","useSelector","PostRequestWithAccessToken","jsxDEV","_jsxDEV","generateId","Math","random","toString","substring","CustomImage","contentState","entityKey","_window$localImageMap","id","getEntity","getData","localUrl","window","localImageMap","src","alt","style","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","PostTemp","_s","editorState","setEditorState","createEmpty","imageFiles","setImageFiles","token","state","auth","accessToken","forEach","onEditorStateChange","uploadImageCallback","file","URL","createObjectURL","prev","Promise","resolve","data","link","uploadImageToServer","formData","FormData","append","res","fetch","method","body","ok","Error","json","url","sanitizeHtmlWithImageFilter","dirtyHtml","sanitize","handleSubmit","getCurrentContent","rawContent","entityMap","key","entity","type","imgObj","find","img","serverUrl","htmlContent","cleanHtml","console","log","titleInput","document","getElementById","title","value","content","alert","error","entityRenderer","IMAGE","props","className","children","placeholder","wrapperClassName","toolbarClassName","editorClassName","toolbar","options","inline","bold","italic","underline","strikethrough","blockType","fontSize","fontFamily","list","textAlign","colorPicker","emoji","image","uploadCallback","previewImage","present","mandatory","uploadEnabled","urlEnabled","remove","history","customBlockRenderFunc","block","getType","getEntityAt","component","editable","onClick","_c2","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/components/PostTemp.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DOMPurify from \"dompurify\";\nimport { useSelector } from \"react-redux\";\n\nimport PostRequestWithAccessToken from \"../api/axios/requestWithAccessToken\";\n\nfunction generateId() {\n  // 간단한 유니크 ID 생성 함수 (랜덤 문자열)\n  return Math.random().toString(36).substring(2, 15);\n}\n\n// 커스텀 이미지 컴포넌트: entity data의 id를 로컬 URL로 변환해서 렌더링\nconst CustomImage = ({ contentState, entityKey }) => {\n  const { id } = contentState.getEntity(entityKey).getData();\n  // id → 로컬 URL 매핑\n  const localUrl = window.localImageMap?.[id] || null;\n  if (!localUrl) return null;\n  return <img src={localUrl} alt=\"uploaded\" style={{ maxWidth: \"100%\" }} />;\n};\n\nconst PostTemp = () => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  // {id, file, localUrl} 배열 관리\n  const [imageFiles, setImageFiles] = useState([]);\n  const token = useSelector((state) => state.auth.accessToken);\n\n  // 전역에 로컬 URL 맵 만들기 (CustomImage에서 접근 가능하게)\n  useEffect(() => {\n    window.localImageMap = {};\n    imageFiles.forEach(({ id, localUrl }) => {\n      window.localImageMap[id] = localUrl;\n    });\n  }, [imageFiles]);\n\n  const onEditorStateChange = (state) => {\n    setEditorState(state);\n  };\n\n  const uploadImageCallback = (file) => {\n    // 이미지마다 고유 id 생성\n    const id = generateId();\n    const localUrl = URL.createObjectURL(file);\n    setImageFiles((prev) => [...prev, { id, file, localUrl }]);\n\n    // entityMap에 id만 넣도록 리턴\n    return Promise.resolve({ data: { link: id } });\n  };\n\n  // 서버 업로드 함수 (기존 그대로)\n  const uploadImageToServer = async (file) => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    const res = await fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData,\n    });\n\n    if (!res.ok) throw new Error(\"이미지 업로드 실패\");\n\n    const data = await res.json();\n    if (!data.url) throw new Error(\"서버에서 URL을 받지 못함\");\n\n    return data.url;\n  };\n\n  const sanitizeHtmlWithImageFilter = (dirtyHtml) => {\n    // 필요시 필터링 구현 (생략해도 됨)\n    return DOMPurify.sanitize(dirtyHtml);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const contentState = editorState.getCurrentContent();\n      let rawContent = convertToRaw(contentState);\n      const entityMap = rawContent.entityMap;\n\n      // id 기준으로 서버 업로드 후 URL 교체\n      for (const key in entityMap) {\n        const entity = entityMap[key];\n        if (entity.type === \"IMAGE\") {\n          const id = entity.data.link; // id를 링크로 넣었으므로\n          const imgObj = imageFiles.find((img) => img.id === id);\n          if (imgObj) {\n            const serverUrl = await uploadImageToServer(imgObj.file);\n            entityMap[key].data.link = serverUrl;\n          }\n        }\n      }\n\n      const htmlContent = draftToHtml(rawContent);\n      const cleanHtml = sanitizeHtmlWithImageFilter(htmlContent);\n\n      console.log(\"HTML:\", cleanHtml);\n\n      const titleInput = document.getElementById(\"draft-title\");\n      const res = await PostRequestWithAccessToken(token, \"/post\", {\n        title: titleInput?.value || \"\",\n        content: cleanHtml,\n      });\n\n      console.log(\"작성 완료:\", res.data);\n      alert(\"글 작성이 완료되었습니다!\");\n\n      setEditorState(EditorState.createEmpty());\n      setImageFiles([]);\n      if (titleInput) titleInput.value = \"\";\n    } catch (error) {\n      console.error(\"글 작성 실패:\", error);\n      alert(\"글 작성 중 오류가 발생했습니다.\");\n    }\n  };\n\n  // entity 타입별 렌더러 (이미지는 커스텀 컴포넌트로 렌더링)\n  const entityRenderer = {\n    IMAGE: (props) => <CustomImage {...props} />,\n  };\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      {/* 제목 입력창 */}\n      <input\n        id=\"draft-title\"\n        placeholder=\"제목을 입력하세요\"\n        className=\"mb-3 p-2 border border-gray-300 rounded focus:border-indigo-300\"\n      />\n\n      {/* 에디터 */}\n      <div className=\"border rounded-md mb-4 h-[590px] flex flex-col\">\n        <Editor\n          editorState={editorState}\n          onEditorStateChange={onEditorStateChange}\n          wrapperClassName=\"flex flex-col h-full\"\n          toolbarClassName=\"!sticky top-0 z-10 bg-white mb-2\"\n          editorClassName=\"flex-1 overflow-y-auto px-2\"\n          toolbar={{\n            options: [\n              \"inline\",\n              \"colorPicker\",\n              \"blockType\",\n              \"list\",\n              \"textAlign\",\n              \"emoji\",\n              \"image\",\n              \"remove\",\n              \"history\",\n              \"fontFamily\",\n              \"fontSize\",\n            ],\n            inline: {\n              options: [\"bold\", \"italic\", \"underline\", \"strikethrough\"],\n              bold: { title: \"굵게\" },\n              italic: { title: \"기울이기\" },\n              underline: { title: \"밑줄\" },\n              strikethrough: { title: \"취소선\" },\n            },\n            blockType: {\n              options: [\"Normal\", \"Blockquote\", \"Code\"],\n            },\n            fontSize: {\n              options: [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96],\n            },\n            fontFamily: {\n              options: [\n                \"Arial\",\n                \"Georgia\",\n                \"Impact\",\n                \"Tahoma\",\n                \"Times New Roman\",\n                \"Verdana\",\n              ],\n            },\n            list: {\n              options: [\"unordered\", \"ordered\"],\n            },\n            textAlign: {\n              options: [\"left\", \"center\", \"right\", \"justify\"],\n            },\n            colorPicker: {},\n            link: {\n              options: [\"link\", \"unlink\"],\n            },\n            emoji: {},\n            image: {\n              uploadCallback: uploadImageCallback,\n              previewImage: true,\n              alt: { present: true, mandatory: false },\n              title: \"이미지 업로드\",\n              uploadEnabled: true,\n              urlEnabled: false,\n            },\n            remove: {},\n            history: {\n              options: [\"undo\", \"redo\"],\n            },\n          }}\n          // entity 커스텀 렌더러 연결\n          customBlockRenderFunc={(block) => {\n            if (block.getType() === \"atomic\") {\n              const contentState = editorState.getCurrentContent();\n              const entityKey = block.getEntityAt(0);\n              if (!entityKey) return null;\n              const entity = contentState.getEntity(entityKey);\n              if (entity.getType() === \"IMAGE\") {\n                return {\n                  component: () => (\n                    <CustomImage contentState={contentState} entityKey={entityKey} />\n                  ),\n                  editable: false,\n                };\n              }\n            }\n            return null;\n          }}\n        />\n      </div>\n\n      {/* 버튼 */}\n      <div className=\"mt-auto flex justify-center\">\n        <button\n          className=\"\n            px-2\n            py-2\n            bg-indigo-500\n            text-xl\n            rounded-full\n            cursor-pointer\n            hover:bg-indigo-700\n          \"\n          onClick={handleSubmit}\n        >\n          🪶\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PostTemp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}