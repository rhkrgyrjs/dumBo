{"ast":null,"code":"import requestWithCredentials from \"./axios/requestWithCredentials\";\nimport { getAccessToken, setAccessToken } from \"./token/accessToken\";\n\n// 로그인(토큰), 회원가입 등 API 요청 처리\n\n// 액세스 토큰 저장\nfunction storeAccessToken(accessToken) {}\n\n// 토큰 페어 요청 : 로그인과는 다른 API 사용, Access Token 필요\nfunction requestTokenPair(accessToken) {}\n\n// 로그인\nexport async function login(username, password) {\n  // 로그인 요청\n  // 로그인 성공 시 토큰 저장\n  // 로그인 실패 시 응답 리턴\n  try {\n    const res = await requestWithCredentials.post('/auth/login', {\n      'username': username,\n      'password': password\n    });\n    setAccessToken(res.data.accessToken.token);\n    console.log(getAccessToken());\n  } catch (error) {\n    if (error.response) {\n      // 서버로부터 응답은 받았지만, 로그인이 실패한 경우\n    } else if (error.request) {\n      // 서버로부터 응답이 오지 않을 경우\n    } else {\n      // 다른 에러\n    }\n  }\n}\n\n// 회원가입\nfunction signup(username, email, password, passwordCheck) {\n  // 기입 정보 체크 -> 기입 정보가 올바르지 않다면 요청 보내지 않음\n  // 회원가입 요청\n  // 요청 성공/실패 여부 리턴\n}","map":{"version":3,"names":["requestWithCredentials","getAccessToken","setAccessToken","storeAccessToken","accessToken","requestTokenPair","login","username","password","res","post","data","token","console","log","error","response","request","signup","email","passwordCheck"],"sources":["/home/hyogun/바탕화면/dumBo/frontend/src/api/auth.js"],"sourcesContent":["import requestWithCredentials from \"./axios/requestWithCredentials\";\nimport { getAccessToken, setAccessToken } from \"./token/accessToken\";\n\n// 로그인(토큰), 회원가입 등 API 요청 처리\n\n// 액세스 토큰 저장\nfunction storeAccessToken(accessToken)\n{\n\n}\n\n// 토큰 페어 요청 : 로그인과는 다른 API 사용, Access Token 필요\nfunction requestTokenPair(accessToken)\n{\n    \n}\n\n// 로그인\nexport async function login(username, password)\n{\n    // 로그인 요청\n    // 로그인 성공 시 토큰 저장\n    // 로그인 실패 시 응답 리턴\n    try\n    {\n        const res = await requestWithCredentials.post(\n            '/auth/login',\n            { 'username' : username, 'password' : password}\n        );\n        setAccessToken(res.data.accessToken.token);\n        console.log(getAccessToken());\n        \n\n    } \n    catch (error)\n    {\n        if (error.response)\n        {\n            // 서버로부터 응답은 받았지만, 로그인이 실패한 경우\n        }\n        else if (error.request)\n        {\n            // 서버로부터 응답이 오지 않을 경우\n        }\n        else\n        {\n            // 다른 에러\n        }\n    }\n}\n\n// 회원가입\nfunction signup(username, email, password, passwordCheck)\n{\n    // 기입 정보 체크 -> 기입 정보가 올바르지 않다면 요청 보내지 않음\n    // 회원가입 요청\n    // 요청 성공/실패 여부 리턴\n}\n"],"mappings":"AAAA,OAAOA,sBAAsB,MAAM,gCAAgC;AACnE,SAASC,cAAc,EAAEC,cAAc,QAAQ,qBAAqB;;AAEpE;;AAEA;AACA,SAASC,gBAAgBA,CAACC,WAAW,EACrC,CAEA;;AAEA;AACA,SAASC,gBAAgBA,CAACD,WAAW,EACrC,CAEA;;AAEA;AACA,OAAO,eAAeE,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAC9C;EACI;EACA;EACA;EACA,IACA;IACI,MAAMC,GAAG,GAAG,MAAMT,sBAAsB,CAACU,IAAI,CACzC,aAAa,EACb;MAAE,UAAU,EAAGH,QAAQ;MAAE,UAAU,EAAGC;IAAQ,CAClD,CAAC;IACDN,cAAc,CAACO,GAAG,CAACE,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAACb,cAAc,CAAC,CAAC,CAAC;EAGjC,CAAC,CACD,OAAOc,KAAK,EACZ;IACI,IAAIA,KAAK,CAACC,QAAQ,EAClB;MACI;IAAA,CACH,MACI,IAAID,KAAK,CAACE,OAAO,EACtB;MACI;IAAA,CACH,MAED;MACI;IAAA;EAER;AACJ;;AAEA;AACA,SAASC,MAAMA,CAACX,QAAQ,EAAEY,KAAK,EAAEX,QAAQ,EAAEY,aAAa,EACxD;EACI;EACA;EACA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}