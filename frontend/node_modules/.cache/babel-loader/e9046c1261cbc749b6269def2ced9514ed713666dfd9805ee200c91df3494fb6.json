{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/src/components/PostTemp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DOMPurify from \"dompurify\";\nimport PostRequestWithAccessToken from \"../api/axios/requestWithAccessToken\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostTemp = () => {\n  _s();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const [imageFiles, setImageFiles] = useState([]);\n  const token = useSelector(state => state.auth.accessToken);\n  const onEditorStateChange = state => {\n    setEditorState(state);\n    console.log(\"Editor state changed\");\n  };\n  const uploadImageCallback = file => {\n    console.log(\"uploadImageCallback called with file:\", file);\n    const localUrl = URL.createObjectURL(file);\n    console.log(\"Generated localUrl:\", localUrl);\n    setImageFiles(prev => [...prev, {\n      file,\n      localUrl\n    }]);\n    return Promise.resolve({\n      data: {\n        link: localUrl\n      }\n    });\n  };\n  const uploadImageToServer = async file => {\n    console.log(\"uploadImageToServer called\");\n    try {\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      const res = await fetch(\"http://localhost:5000/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) {\n        console.error(\"Image upload failed with status:\", res.status);\n        throw new Error(\"이미지 업로드 실패\");\n      }\n      const data = await res.json();\n      console.log(\"Image uploaded to server, received data:\", data);\n      if (!data.url) {\n        console.error(\"Server response missing URL\");\n        throw new Error(\"서버에서 URL을 받지 못함\");\n      }\n      return data.url;\n    } catch (error) {\n      console.error(\"uploadImageToServer error:\", error);\n      throw error;\n    }\n  };\n  const allowedImageDomains = [\"http://localhost:5000/uploads\"];\n  function sanitizeHtmlWithImageFilter(dirtyHtml) {\n    console.log(\"sanitizeHtmlWithImageFilter called\");\n    DOMPurify.addHook(\"uponSanitizeElement\", node => {\n      if (node.tagName === \"IMG\") {\n        const src = node.getAttribute(\"src\") || \"\";\n        const allowed = allowedImageDomains.some(domain => src.startsWith(domain));\n        if (!allowed) {\n          console.warn(\"Removing disallowed image src:\", src);\n          node.parentNode && node.parentNode.removeChild(node);\n        }\n      }\n    });\n    const cleanHtml = DOMPurify.sanitize(dirtyHtml);\n    DOMPurify.removeAllHooks();\n    console.log(\"Sanitized HTML:\", cleanHtml);\n    return cleanHtml;\n  }\n  const handleSubmit = async () => {\n    console.log(\"handleSubmit called\");\n    try {\n      const contentState = editorState.getCurrentContent();\n      const rawContent = convertToRaw(contentState);\n      console.log(\"Raw content extracted:\", rawContent);\n\n      // entityMap 무결성 점검\n      const filteredEntityMap = {};\n      for (const key in rawContent.entityMap) {\n        if (key !== null && key !== \"null\" && rawContent.entityMap[key]) {\n          filteredEntityMap[key] = rawContent.entityMap[key];\n        } else {\n          console.warn(`Invalid entity key or value detected: key=${key}, value=`, rawContent.entityMap[key]);\n        }\n      }\n      console.log(\"Filtered entityMap:\", filteredEntityMap);\n\n      // 이미지 src 교체\n      for (const key in filteredEntityMap) {\n        const entity = filteredEntityMap[key];\n        if (entity.type === \"IMAGE\") {\n          const localSrc = entity.data.src;\n          console.log(`Found IMAGE entity with localSrc: ${localSrc}`);\n          const imgObj = imageFiles.find(img => img.localUrl === localSrc);\n          if (imgObj) {\n            console.log(\"Uploading image to server for src:\", localSrc);\n            const serverUrl = await uploadImageToServer(imgObj.file);\n            console.log(\"Replacing local src with server url:\", serverUrl);\n            filteredEntityMap[key] = {\n              ...entity,\n              data: {\n                ...entity.data,\n                src: serverUrl\n              }\n            };\n          } else {\n            console.warn(\"No matching image file found for src:\", localSrc);\n          }\n        }\n      }\n      const fixedRawContent = {\n        ...rawContent,\n        entityMap: filteredEntityMap\n      };\n      console.log(\"Final raw content to convert to HTML:\", fixedRawContent);\n      const htmlContent = draftToHtml(fixedRawContent);\n      console.log(\"Converted HTML content:\", htmlContent);\n      const cleanHtml = sanitizeHtmlWithImageFilter(htmlContent);\n\n      // API 요청\n      const titleValue = document.getElementById(\"draft-title\").value;\n      console.log(\"Submitting post with title:\", titleValue);\n      const res = await PostRequestWithAccessToken(token, \"/post\", {\n        title: titleValue,\n        content: cleanHtml\n      });\n      console.log(\"Post submitted successfully:\", res);\n      alert(\"글 작성이 완료되었습니다!\");\n      setEditorState(EditorState.createEmpty());\n      setImageFiles([]);\n    } catch (error) {\n      console.error(\"글 작성 실패:\", error);\n      alert(\"글 작성 중 오류가 발생했습니다.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col w-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"draft-title\",\n      placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      className: \"mb-3 p-2 border border-gray-300 rounded focus:border-indigo-300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border rounded-md mb-4 h-[590px] flex flex-col\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        editorState: editorState,\n        onEditorStateChange: onEditorStateChange,\n        wrapperClassName: \"flex flex-col h-full\",\n        toolbarClassName: \"!sticky top-0 z-10 bg-white mb-2\",\n        editorClassName: \"flex-1 overflow-y-auto px-2 no-drag-img\",\n        toolbar: {\n          options: [\"inline\", \"colorPicker\", \"blockType\", \"list\", \"textAlign\", \"emoji\", \"image\", \"remove\", \"history\", \"fontFamily\", \"fontSize\"],\n          inline: {\n            options: [\"bold\", \"italic\", \"underline\", \"strikethrough\"],\n            bold: {\n              title: \"굵게\"\n            },\n            italic: {\n              title: \"기울이기\"\n            },\n            underline: {\n              title: \"밑줄\"\n            },\n            strikethrough: {\n              title: \"취소선\"\n            }\n          },\n          blockType: {\n            options: [\"Normal\", \"Blockquote\", \"Code\"]\n          },\n          fontSize: {\n            options: [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96]\n          },\n          fontFamily: {\n            options: [\"Arial\", \"Georgia\", \"Impact\", \"Tahoma\", \"Times New Roman\", \"Verdana\"]\n          },\n          list: {\n            options: [\"unordered\", \"ordered\"]\n          },\n          textAlign: {\n            options: [\"left\", \"center\", \"right\", \"justify\"]\n          },\n          colorPicker: {},\n          link: {\n            options: [\"link\", \"unlink\"]\n          },\n          emoji: {},\n          image: {\n            uploadCallback: uploadImageCallback,\n            previewImage: true,\n            alt: {\n              present: true,\n              mandatory: false\n            },\n            title: \"이미지 업로드\",\n            uploadEnabled: true,\n            urlEnabled: false\n          },\n          remove: {},\n          history: {\n            options: [\"undo\", \"redo\"]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-auto flex justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-2 py-2 bg-indigo-500 text-xl rounded-full cursor-pointer hover:bg-indigo-700\",\n        onClick: handleSubmit,\n        children: \"\\uD83E\\uDEB6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(PostTemp, \"v1oXy2VCIhnuNRoi6hfcZg0ceP4=\", false, function () {\n  return [useSelector];\n});\n_c = PostTemp;\nexport default PostTemp;\nvar _c;\n$RefreshReg$(_c, \"PostTemp\");","map":{"version":3,"names":["React","useState","Editor","EditorState","convertToRaw","draftToHtml","DOMPurify","PostRequestWithAccessToken","useSelector","jsxDEV","_jsxDEV","PostTemp","_s","editorState","setEditorState","createEmpty","imageFiles","setImageFiles","token","state","auth","accessToken","onEditorStateChange","console","log","uploadImageCallback","file","localUrl","URL","createObjectURL","prev","Promise","resolve","data","link","uploadImageToServer","formData","FormData","append","res","fetch","method","body","ok","error","status","Error","json","url","allowedImageDomains","sanitizeHtmlWithImageFilter","dirtyHtml","addHook","node","tagName","src","getAttribute","allowed","some","domain","startsWith","warn","parentNode","removeChild","cleanHtml","sanitize","removeAllHooks","handleSubmit","contentState","getCurrentContent","rawContent","filteredEntityMap","key","entityMap","entity","type","localSrc","imgObj","find","img","serverUrl","fixedRawContent","htmlContent","titleValue","document","getElementById","value","title","content","alert","className","children","id","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","wrapperClassName","toolbarClassName","editorClassName","toolbar","options","inline","bold","italic","underline","strikethrough","blockType","fontSize","fontFamily","list","textAlign","colorPicker","emoji","image","uploadCallback","previewImage","alt","present","mandatory","uploadEnabled","urlEnabled","remove","history","onClick","_c","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/components/PostTemp.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport DOMPurify from \"dompurify\";\n\nimport PostRequestWithAccessToken from \"../api/axios/requestWithAccessToken\";\nimport { useSelector } from \"react-redux\";\n\nconst PostTemp = () => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const [imageFiles, setImageFiles] = useState([]);\n  const token = useSelector((state) => state.auth.accessToken);\n\n  const onEditorStateChange = (state) => {\n    setEditorState(state);\n    console.log(\"Editor state changed\");\n  };\n\n  const uploadImageCallback = (file) => {\n    console.log(\"uploadImageCallback called with file:\", file);\n    const localUrl = URL.createObjectURL(file);\n    console.log(\"Generated localUrl:\", localUrl);\n    setImageFiles((prev) => [...prev, { file, localUrl }]);\n    return Promise.resolve({ data: { link: localUrl } });\n  };\n\n  const uploadImageToServer = async (file) => {\n    console.log(\"uploadImageToServer called\");\n    try {\n      const formData = new FormData();\n      formData.append(\"image\", file);\n\n      const res = await fetch(\"http://localhost:5000/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!res.ok) {\n        console.error(\"Image upload failed with status:\", res.status);\n        throw new Error(\"이미지 업로드 실패\");\n      }\n\n      const data = await res.json();\n      console.log(\"Image uploaded to server, received data:\", data);\n\n      if (!data.url) {\n        console.error(\"Server response missing URL\");\n        throw new Error(\"서버에서 URL을 받지 못함\");\n      }\n\n      return data.url;\n    } catch (error) {\n      console.error(\"uploadImageToServer error:\", error);\n      throw error;\n    }\n  };\n\n  const allowedImageDomains = [\"http://localhost:5000/uploads\"];\n\n  function sanitizeHtmlWithImageFilter(dirtyHtml) {\n    console.log(\"sanitizeHtmlWithImageFilter called\");\n    DOMPurify.addHook(\"uponSanitizeElement\", (node) => {\n      if (node.tagName === \"IMG\") {\n        const src = node.getAttribute(\"src\") || \"\";\n        const allowed = allowedImageDomains.some((domain) =>\n          src.startsWith(domain)\n        );\n        if (!allowed) {\n          console.warn(\"Removing disallowed image src:\", src);\n          node.parentNode && node.parentNode.removeChild(node);\n        }\n      }\n    });\n\n    const cleanHtml = DOMPurify.sanitize(dirtyHtml);\n    DOMPurify.removeAllHooks();\n\n    console.log(\"Sanitized HTML:\", cleanHtml);\n    return cleanHtml;\n  }\n\n  const handleSubmit = async () => {\n    console.log(\"handleSubmit called\");\n    try {\n      const contentState = editorState.getCurrentContent();\n      const rawContent = convertToRaw(contentState);\n      console.log(\"Raw content extracted:\", rawContent);\n\n      // entityMap 무결성 점검\n      const filteredEntityMap = {};\n      for (const key in rawContent.entityMap) {\n        if (key !== null && key !== \"null\" && rawContent.entityMap[key]) {\n          filteredEntityMap[key] = rawContent.entityMap[key];\n        } else {\n          console.warn(\n            `Invalid entity key or value detected: key=${key}, value=`,\n            rawContent.entityMap[key]\n          );\n        }\n      }\n      console.log(\"Filtered entityMap:\", filteredEntityMap);\n\n      // 이미지 src 교체\n      for (const key in filteredEntityMap) {\n        const entity = filteredEntityMap[key];\n        if (entity.type === \"IMAGE\") {\n          const localSrc = entity.data.src;\n          console.log(`Found IMAGE entity with localSrc: ${localSrc}`);\n          const imgObj = imageFiles.find((img) => img.localUrl === localSrc);\n          if (imgObj) {\n            console.log(\"Uploading image to server for src:\", localSrc);\n            const serverUrl = await uploadImageToServer(imgObj.file);\n            console.log(\"Replacing local src with server url:\", serverUrl);\n            filteredEntityMap[key] = {\n              ...entity,\n              data: {\n                ...entity.data,\n                src: serverUrl,\n              },\n            };\n          } else {\n            console.warn(\"No matching image file found for src:\", localSrc);\n          }\n        }\n      }\n\n      const fixedRawContent = {\n        ...rawContent,\n        entityMap: filteredEntityMap,\n      };\n      console.log(\"Final raw content to convert to HTML:\", fixedRawContent);\n\n      const htmlContent = draftToHtml(fixedRawContent);\n      console.log(\"Converted HTML content:\", htmlContent);\n\n      const cleanHtml = sanitizeHtmlWithImageFilter(htmlContent);\n\n      // API 요청\n      const titleValue = document.getElementById(\"draft-title\").value;\n      console.log(\"Submitting post with title:\", titleValue);\n      const res = await PostRequestWithAccessToken(token, \"/post\", {\n        title: titleValue,\n        content: cleanHtml,\n      });\n\n      console.log(\"Post submitted successfully:\", res);\n      alert(\"글 작성이 완료되었습니다!\");\n      setEditorState(EditorState.createEmpty());\n      setImageFiles([]);\n    } catch (error) {\n      console.error(\"글 작성 실패:\", error);\n      alert(\"글 작성 중 오류가 발생했습니다.\");\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      <input\n        id=\"draft-title\"\n        placeholder=\"제목을 입력하세요\"\n        className=\"mb-3 p-2 border border-gray-300 rounded focus:border-indigo-300\"\n      />\n\n      <div className=\"border rounded-md mb-4 h-[590px] flex flex-col\">\n        <Editor\n          editorState={editorState}\n          onEditorStateChange={onEditorStateChange}\n          wrapperClassName=\"flex flex-col h-full\"\n          toolbarClassName=\"!sticky top-0 z-10 bg-white mb-2\"\n          editorClassName=\"flex-1 overflow-y-auto px-2 no-drag-img\"\n          toolbar={{\n            options: [\n              \"inline\",\n              \"colorPicker\",\n              \"blockType\",\n              \"list\",\n              \"textAlign\",\n              \"emoji\",\n              \"image\",\n              \"remove\",\n              \"history\",\n              \"fontFamily\",\n              \"fontSize\",\n            ],\n            inline: {\n              options: [\"bold\", \"italic\", \"underline\", \"strikethrough\"],\n              bold: { title: \"굵게\" },\n              italic: { title: \"기울이기\" },\n              underline: { title: \"밑줄\" },\n              strikethrough: { title: \"취소선\" },\n            },\n            blockType: {\n              options: [\"Normal\", \"Blockquote\", \"Code\"],\n            },\n            fontSize: {\n              options: [\n                8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96,\n              ],\n            },\n            fontFamily: {\n              options: [\n                \"Arial\",\n                \"Georgia\",\n                \"Impact\",\n                \"Tahoma\",\n                \"Times New Roman\",\n                \"Verdana\",\n              ],\n            },\n            list: {\n              options: [\"unordered\", \"ordered\"],\n            },\n            textAlign: {\n              options: [\"left\", \"center\", \"right\", \"justify\"],\n            },\n            colorPicker: {},\n            link: {\n              options: [\"link\", \"unlink\"],\n            },\n            emoji: {},\n            image: {\n              uploadCallback: uploadImageCallback,\n              previewImage: true,\n              alt: { present: true, mandatory: false },\n              title: \"이미지 업로드\",\n              uploadEnabled: true,\n              urlEnabled: false,\n            },\n            remove: {},\n            history: {\n              options: [\"undo\", \"redo\"],\n            },\n          }}\n        />\n      </div>\n\n      <div className=\"mt-auto flex justify-center\">\n        <button\n          className=\"px-2 py-2 bg-indigo-500 text-xl rounded-full cursor-pointer hover:bg-indigo-700\"\n          onClick={handleSubmit}\n        >\n          🪶\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PostTemp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}