{"ast":null,"code":"import requestWithCredentials from \"./axios/requestWithCredentials\";\nimport request from './axios/request';\n\n// 로그인(토큰), 회원가입 등 API 요청 처리\n\n// 토큰 페어 요청 : 로그인과는 다른 API 사용\nexport async function requestTokenPair() {\n  try {\n    const res = await requestWithCredentials.post('/auth/reissue');\n    return {\n      'nickname': res.data.nickname,\n      'userId': res.data.accessToken.userId,\n      'accessToken': res.data.accessToken.token\n    };\n  } catch (error) {\n    if (error.response) {\n      // 서버로부터 응답은 받았지만, 토큰 재발급이 실패한 경우\n      // 재로그인을 유도해야 함\n      console.log(error.response);\n    } else if (error.request) {\n      // 서버로부터 응답이 오지 않을 경우\n      console.log(error.request);\n    } else {\n      // 다른 에러 발생 시\n      console.log(error);\n    }\n    return null;\n  }\n}\n\n// 로그인\nexport async function login(email, password) {\n  try {\n    // 로그인 요청\n    const res = await requestWithCredentials.post('/auth/login', {\n      'email': email,\n      'password': password\n    });\n    return {\n      'nickname': res.data.nickname,\n      'userId': res.data.accessToken.userId,\n      'accessToken': res.data.accessToken.token\n    };\n  } catch (error) {\n    if (error.response) {\n      // 서버로부터 응답은 받았지만, 로그인이 실패한 경우\n      // HTTP 응답 코드에 따라 분기할 것인지는 나중에 선택하자\n      console.log(error.response);\n    } else if (error.request) {\n      // 서버로부터 응답이 오지 않을 경우\n      console.log(error.request);\n    } else {\n      // 다른 에러 발생 시\n      console.log(error);\n    }\n    return null;\n  }\n}\nexport async function logout() {\n  try {\n    let res = await requestWithCredentials.post('/auth/logout');\n    console.log(res.data);\n  } catch (error) {\n    if (error.request) console.log('서버로부터 요청이 오지 않음');\n  }\n}\n\n// 닉네임 사용 가능한지 체크\nexport async function nicknameCheck(nickname) {\n  try {\n    let res = await request.get('/auth/signup/nickname-check', {\n      params: {\n        'nickname': nickname\n      }\n    });\n    console.log(res.data.message);\n    return res.data.useable;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\n\n// 이메일 사용 가능한지 체크\nexport async function emailCheck(email) {\n  try {\n    let res = await request.get('/auth/signup/email-check', {\n      params: {\n        'email': email\n      }\n    });\n    console.log(res.data.message);\n    return res.data.useable;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\n\n// 회원가입 --> 일단 임시로 짜놓음\nexport async function signup(email, password, nickname) {\n  // 기입 정보 체크 -> 기입 정보가 올바르지 않다면 요청 보내지 않음\n  // 회원가입 요청\n  // 요청 성공/실패 여부 리턴\n\n  try {\n    // 로그인 요청\n    const res = await request.post('/auth/signup', {\n      'email': email,\n      'password': password,\n      'nickname': nickname\n    });\n    return true;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}","map":{"version":3,"names":["requestWithCredentials","request","requestTokenPair","res","post","data","nickname","accessToken","userId","token","error","response","console","log","login","email","password","logout","nicknameCheck","get","params","message","useable","emailCheck","signup"],"sources":["/home/kovox/바탕화면/dumbo/frontend/src/api/auth.js"],"sourcesContent":["import requestWithCredentials from \"./axios/requestWithCredentials\";\nimport request from './axios/request'\n\n// 로그인(토큰), 회원가입 등 API 요청 처리\n\n// 토큰 페어 요청 : 로그인과는 다른 API 사용\nexport async function requestTokenPair()\n{\n    try\n    {\n        const res = await requestWithCredentials.post(\n            '/auth/reissue'\n        );\n        return { 'nickname' : res.data.nickname, 'userId' : res.data.accessToken.userId, 'accessToken' : res.data.accessToken.token };\n    }\n    catch (error)\n    {\n        if (error.response)\n        {\n            // 서버로부터 응답은 받았지만, 토큰 재발급이 실패한 경우\n            // 재로그인을 유도해야 함\n            console.log(error.response);\n        }\n        else if (error.request)\n        {\n            // 서버로부터 응답이 오지 않을 경우\n            console.log(error.request);\n        }\n        else\n        {\n            // 다른 에러 발생 시\n            console.log(error);\n        }\n        return null;\n    }\n}\n\n// 로그인\nexport async function login(email, password)\n{\n    try\n    {\n        // 로그인 요청\n        const res = await requestWithCredentials.post(\n            '/auth/login',\n            { 'email' : email, 'password' : password}\n        );\n        return { 'nickname' : res.data.nickname, 'userId' : res.data.accessToken.userId, 'accessToken' : res.data.accessToken.token };\n    }\n    catch (error)\n    {\n        if (error.response)\n        {\n            // 서버로부터 응답은 받았지만, 로그인이 실패한 경우\n            // HTTP 응답 코드에 따라 분기할 것인지는 나중에 선택하자\n            console.log(error.response);\n        }\n        else if (error.request)\n        {\n            // 서버로부터 응답이 오지 않을 경우\n            console.log(error.request);\n        }\n        else\n        {\n            // 다른 에러 발생 시\n            console.log(error);\n        }\n        return null;\n    }\n}\n\nexport async function logout()\n{\n    try { let res = await requestWithCredentials.post('/auth/logout'); console.log(res.data); }\n    catch (error) { if (error.request) console.log('서버로부터 요청이 오지 않음'); }\n}\n\n\n\n// 닉네임 사용 가능한지 체크\nexport async function nicknameCheck(nickname)\n{\n    try\n    {\n        let res = await request.get('/auth/signup/nickname-check', { params : { 'nickname' : nickname } });\n        console.log(res.data.message);\n        return res.data.useable;\n    }\n    catch (error)\n    {\n        console.log(error);\n        return false;\n    }\n}\n\n// 이메일 사용 가능한지 체크\nexport async function emailCheck(email)\n{\n    try\n    {\n        let res = await request.get('/auth/signup/email-check', {params : { 'email' : email } });\n        console.log(res.data.message);\n        return res.data.useable;\n    }\n    catch (error)\n    {\n        console.log(error);\n        return false;\n    }\n}\n\n// 회원가입 --> 일단 임시로 짜놓음\nexport async function signup(email, password, nickname)\n{\n    // 기입 정보 체크 -> 기입 정보가 올바르지 않다면 요청 보내지 않음\n    // 회원가입 요청\n    // 요청 성공/실패 여부 리턴\n    \n    try\n    {\n        // 로그인 요청\n        const res = await request.post(\n            '/auth/signup',\n            { 'email' : email, 'password' : password, 'nickname' : nickname }\n        );\n        return true;\n    } catch (error)\n    {\n        console.log(error);\n        return false;\n    }\n}"],"mappings":"AAAA,OAAOA,sBAAsB,MAAM,gCAAgC;AACnE,OAAOC,OAAO,MAAM,iBAAiB;;AAErC;;AAEA;AACA,OAAO,eAAeC,gBAAgBA,CAAA,EACtC;EACI,IACA;IACI,MAAMC,GAAG,GAAG,MAAMH,sBAAsB,CAACI,IAAI,CACzC,eACJ,CAAC;IACD,OAAO;MAAE,UAAU,EAAGD,GAAG,CAACE,IAAI,CAACC,QAAQ;MAAE,QAAQ,EAAGH,GAAG,CAACE,IAAI,CAACE,WAAW,CAACC,MAAM;MAAE,aAAa,EAAGL,GAAG,CAACE,IAAI,CAACE,WAAW,CAACE;IAAM,CAAC;EACjI,CAAC,CACD,OAAOC,KAAK,EACZ;IACI,IAAIA,KAAK,CAACC,QAAQ,EAClB;MACI;MACA;MACAC,OAAO,CAACC,GAAG,CAACH,KAAK,CAACC,QAAQ,CAAC;IAC/B,CAAC,MACI,IAAID,KAAK,CAACT,OAAO,EACtB;MACI;MACAW,OAAO,CAACC,GAAG,CAACH,KAAK,CAACT,OAAO,CAAC;IAC9B,CAAC,MAED;MACI;MACAW,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IACtB;IACA,OAAO,IAAI;EACf;AACJ;;AAEA;AACA,OAAO,eAAeI,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAC3C;EACI,IACA;IACI;IACA,MAAMb,GAAG,GAAG,MAAMH,sBAAsB,CAACI,IAAI,CACzC,aAAa,EACb;MAAE,OAAO,EAAGW,KAAK;MAAE,UAAU,EAAGC;IAAQ,CAC5C,CAAC;IACD,OAAO;MAAE,UAAU,EAAGb,GAAG,CAACE,IAAI,CAACC,QAAQ;MAAE,QAAQ,EAAGH,GAAG,CAACE,IAAI,CAACE,WAAW,CAACC,MAAM;MAAE,aAAa,EAAGL,GAAG,CAACE,IAAI,CAACE,WAAW,CAACE;IAAM,CAAC;EACjI,CAAC,CACD,OAAOC,KAAK,EACZ;IACI,IAAIA,KAAK,CAACC,QAAQ,EAClB;MACI;MACA;MACAC,OAAO,CAACC,GAAG,CAACH,KAAK,CAACC,QAAQ,CAAC;IAC/B,CAAC,MACI,IAAID,KAAK,CAACT,OAAO,EACtB;MACI;MACAW,OAAO,CAACC,GAAG,CAACH,KAAK,CAACT,OAAO,CAAC;IAC9B,CAAC,MAED;MACI;MACAW,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IACtB;IACA,OAAO,IAAI;EACf;AACJ;AAEA,OAAO,eAAeO,MAAMA,CAAA,EAC5B;EACI,IAAI;IAAE,IAAId,GAAG,GAAG,MAAMH,sBAAsB,CAACI,IAAI,CAAC,cAAc,CAAC;IAAEQ,OAAO,CAACC,GAAG,CAACV,GAAG,CAACE,IAAI,CAAC;EAAE,CAAC,CAC3F,OAAOK,KAAK,EAAE;IAAE,IAAIA,KAAK,CAACT,OAAO,EAAEW,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAAE;AACvE;;AAIA;AACA,OAAO,eAAeK,aAAaA,CAACZ,QAAQ,EAC5C;EACI,IACA;IACI,IAAIH,GAAG,GAAG,MAAMF,OAAO,CAACkB,GAAG,CAAC,6BAA6B,EAAE;MAAEC,MAAM,EAAG;QAAE,UAAU,EAAGd;MAAS;IAAE,CAAC,CAAC;IAClGM,OAAO,CAACC,GAAG,CAACV,GAAG,CAACE,IAAI,CAACgB,OAAO,CAAC;IAC7B,OAAOlB,GAAG,CAACE,IAAI,CAACiB,OAAO;EAC3B,CAAC,CACD,OAAOZ,KAAK,EACZ;IACIE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAClB,OAAO,KAAK;EAChB;AACJ;;AAEA;AACA,OAAO,eAAea,UAAUA,CAACR,KAAK,EACtC;EACI,IACA;IACI,IAAIZ,GAAG,GAAG,MAAMF,OAAO,CAACkB,GAAG,CAAC,0BAA0B,EAAE;MAACC,MAAM,EAAG;QAAE,OAAO,EAAGL;MAAM;IAAE,CAAC,CAAC;IACxFH,OAAO,CAACC,GAAG,CAACV,GAAG,CAACE,IAAI,CAACgB,OAAO,CAAC;IAC7B,OAAOlB,GAAG,CAACE,IAAI,CAACiB,OAAO;EAC3B,CAAC,CACD,OAAOZ,KAAK,EACZ;IACIE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAClB,OAAO,KAAK;EAChB;AACJ;;AAEA;AACA,OAAO,eAAec,MAAMA,CAACT,KAAK,EAAEC,QAAQ,EAAEV,QAAQ,EACtD;EACI;EACA;EACA;;EAEA,IACA;IACI;IACA,MAAMH,GAAG,GAAG,MAAMF,OAAO,CAACG,IAAI,CAC1B,cAAc,EACd;MAAE,OAAO,EAAGW,KAAK;MAAE,UAAU,EAAGC,QAAQ;MAAE,UAAU,EAAGV;IAAS,CACpE,CAAC;IACD,OAAO,IAAI;EACf,CAAC,CAAC,OAAOI,KAAK,EACd;IACIE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAClB,OAAO,KAAK;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}