{"ast":null,"code":"const modalStack = [];\n\n// 모달 저장, 중복 모달이 있을 경우 제거.\nexport async function modalPush(modalObj) {\n  // modalObj = { name, setIsOpen, clearModal }\n\n  // 0. { \"name\" : 모달이름, \"setIsOpen\" : 함수, \"modalClear\" : 함수 } 형식의 객체를 넣음\n  // 1. 들어온 모달이 이미 스택에 존재할 경우, 해당 모달을 스택에서 없앰(맨 위로 바꾸는 효과를 위해)\n  // 2. 객체 스택에 저장\n  // 3. 모달의 setIsOpen(true) 호출\n\n  // modalObj.name과 같은 name을 가진 모달 오브젝트가 배열에 있을 경우, 그것만 제거\n  for (let i = modalStack.length - 1; i >= 0; i--) {\n    if (modalStack[i].name === modalObj.name) {\n      modalStack.splice(i, 1);\n      break;\n    }\n  }\n  // 열려있는 모달이 있을 경우 숨기기\n  if (modalStack.length > 0) {\n    modalStack[modalStack.length - 1].setIsOpen(false);\n  }\n  // 새로 들어온 모달 푸시\n  modalStack.push(modalObj);\n  // 새로 들어온 모달 띄우기\n  modalObj.setIsOpen(true);\n}\n\n// 모달 제거. 모달에 저장된 양식들? 모두 삭제하기.\nexport async function modalPop() {\n  // 1. 스택 맨 위에서 제거.\n  // 2. 스택 '맨 위'에 있는 모달 setIsOpen(false) 호출\n  // 3. 모달 안에 있는 내용들 초기화. modalClear()\n  if (modalStack.length > 0) {\n    let modal = modalStack.pop();\n    modal.setIsOpen(false);\n    modal.modalClear();\n    if (modalStack.length > 0) {\n      modalStack[modalStack.length - 1].setIsOpen(true);\n    }\n  }\n}","map":{"version":3,"names":["modalStack","modalPush","modalObj","i","length","name","splice","setIsOpen","push","modalPop","modal","pop","modalClear"],"sources":["/home/hyogun/바탕화면/dumBo/frontend/src/components/modals/ModalStack.js"],"sourcesContent":["const modalStack = [];\n\n// 모달 저장, 중복 모달이 있을 경우 제거.\nexport async function modalPush(modalObj)\n{\n    // modalObj = { name, setIsOpen, clearModal }\n\n    // 0. { \"name\" : 모달이름, \"setIsOpen\" : 함수, \"modalClear\" : 함수 } 형식의 객체를 넣음\n    // 1. 들어온 모달이 이미 스택에 존재할 경우, 해당 모달을 스택에서 없앰(맨 위로 바꾸는 효과를 위해)\n    // 2. 객체 스택에 저장\n    // 3. 모달의 setIsOpen(true) 호출\n\n    // modalObj.name과 같은 name을 가진 모달 오브젝트가 배열에 있을 경우, 그것만 제거\n    for (let i = modalStack.length - 1; i >= 0; i--) { if (modalStack[i].name === modalObj.name) { modalStack.splice(i, 1); break; } }\n    // 열려있는 모달이 있을 경우 숨기기\n    if (modalStack.length > 0) { modalStack[modalStack.length-1].setIsOpen(false); }\n    // 새로 들어온 모달 푸시\n    modalStack.push(modalObj);\n    // 새로 들어온 모달 띄우기\n    modalObj.setIsOpen(true);\n}\n\n// 모달 제거. 모달에 저장된 양식들? 모두 삭제하기.\nexport async function modalPop()\n{\n    // 1. 스택 맨 위에서 제거.\n    // 2. 스택 '맨 위'에 있는 모달 setIsOpen(false) 호출\n    // 3. 모달 안에 있는 내용들 초기화. modalClear()\n    if (modalStack.length > 0)\n    {\n        let modal = modalStack.pop();\n        modal.setIsOpen(false);\n        modal.modalClear();\n        if (modalStack.length > 0) { modalStack[modalStack.length-1].setIsOpen(true); }\n    }\n}"],"mappings":"AAAA,MAAMA,UAAU,GAAG,EAAE;;AAErB;AACA,OAAO,eAAeC,SAASA,CAACC,QAAQ,EACxC;EACI;;EAEA;EACA;EACA;EACA;;EAEA;EACA,KAAK,IAAIC,CAAC,GAAGH,UAAU,CAACI,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAAE,IAAIH,UAAU,CAACG,CAAC,CAAC,CAACE,IAAI,KAAKH,QAAQ,CAACG,IAAI,EAAE;MAAEL,UAAU,CAACM,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;MAAE;IAAO;EAAE;EACjI;EACA,IAAIH,UAAU,CAACI,MAAM,GAAG,CAAC,EAAE;IAAEJ,UAAU,CAACA,UAAU,CAACI,MAAM,GAAC,CAAC,CAAC,CAACG,SAAS,CAAC,KAAK,CAAC;EAAE;EAC/E;EACAP,UAAU,CAACQ,IAAI,CAACN,QAAQ,CAAC;EACzB;EACAA,QAAQ,CAACK,SAAS,CAAC,IAAI,CAAC;AAC5B;;AAEA;AACA,OAAO,eAAeE,QAAQA,CAAA,EAC9B;EACI;EACA;EACA;EACA,IAAIT,UAAU,CAACI,MAAM,GAAG,CAAC,EACzB;IACI,IAAIM,KAAK,GAAGV,UAAU,CAACW,GAAG,CAAC,CAAC;IAC5BD,KAAK,CAACH,SAAS,CAAC,KAAK,CAAC;IACtBG,KAAK,CAACE,UAAU,CAAC,CAAC;IAClB,IAAIZ,UAAU,CAACI,MAAM,GAAG,CAAC,EAAE;MAAEJ,UAAU,CAACA,UAAU,CAACI,MAAM,GAAC,CAAC,CAAC,CAACG,SAAS,CAAC,IAAI,CAAC;IAAE;EAClF;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}