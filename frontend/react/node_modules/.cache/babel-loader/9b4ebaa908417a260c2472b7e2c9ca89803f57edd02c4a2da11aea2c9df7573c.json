{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/src/postTest/ArticleTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport PostCard from './PostCard'; // 경로에 맞게 조정하세요\n\n// 댓글 예시 데이터 (기존 bigComments 복붙)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bigComments = [{\n  id: \"c1\",\n  author: \"user23\",\n  content: \"댓글 내용 547\",\n  createdAt: \"2023-07-24T03:54:01.112Z\",\n  replies: [{\n    id: \"r1_1\",\n    author: \"replyUser15\",\n    content: \"답글 내용 196\",\n    createdAt: \"2024-01-05T19:10:14.232Z\"\n  }, {\n    id: \"r1_2\",\n    author: \"replyUser84\",\n    content: \"답글 내용 438\",\n    createdAt: \"2025-02-28T11:39:52.821Z\"\n  }]\n}, {\n  id: \"c2\",\n  author: \"user41\",\n  content: \"댓글 내용 803\",\n  createdAt: \"2023-08-12T12:22:44.639Z\",\n  replies: []\n}, {\n  id: \"c3\",\n  author: \"user99\",\n  content: \"댓글 내용 142\",\n  createdAt: \"2025-04-16T07:01:12.761Z\",\n  replies: [{\n    id: \"r3_1\",\n    author: \"replyUser56\",\n    content: \"답글 내용 814\",\n    createdAt: \"2025-04-23T17:25:43.372Z\"\n  }]\n}];\n\n// 여러 게시글 예시 (20개 생성)\nconst samplePosts = Array(100).fill(null).map((_, i) => ({\n  id: `post_${i + 1}`,\n  nickname: `홍길동_${i + 1}`,\n  title: `게시글 제목 ${i + 1}`,\n  createdAt: '2025-06-13T10:00:00Z',\n  updatedAt: '2025-06-13T12:00:00Z',\n  contentHtml: `<p>게시글 내용 예시 ${i + 1}. <strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p>`,\n  thumbnailImage: 'https://via.placeholder.com/600x300',\n  comments: bigComments\n}));\nexport default function ArticleTest() {\n  _s();\n  const [posts, setPosts] = useState(samplePosts.slice(0, 5)); // 처음 5개만 로드\n  const loadMoreRef = useRef();\n\n  // 다음 게시글 5개 추가 로드\n  const loadMore = useCallback(() => {\n    setPosts(prev => {\n      if (prev.length >= samplePosts.length) return prev;\n      return [...prev, ...samplePosts.slice(prev.length, prev.length + 5)];\n    });\n  }, []);\n  useEffect(() => {\n    if (!loadMoreRef.current) return;\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        loadMore();\n      }\n    }, {\n      rootMargin: '200px'\n    });\n    observer.observe(loadMoreRef.current);\n    return () => {\n      if (loadMoreRef.current) observer.unobserve(loadMoreRef.current);\n    };\n  }, [loadMore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xl mx-auto mt-10 px-4\",\n    children: [posts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: loadMoreRef,\n      style: {\n        height: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(ArticleTest, \"1kVeciPh12yLokrVuz+Q9iUpQw4=\");\n_c = ArticleTest;\nvar _c;\n$RefreshReg$(_c, \"ArticleTest\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","PostCard","jsxDEV","_jsxDEV","bigComments","id","author","content","createdAt","replies","samplePosts","Array","fill","map","_","i","nickname","title","updatedAt","contentHtml","thumbnailImage","comments","ArticleTest","_s","posts","setPosts","slice","loadMoreRef","loadMore","prev","length","current","observer","IntersectionObserver","entry","isIntersecting","rootMargin","observe","unobserve","className","children","post","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","height","_c","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/postTest/ArticleTest.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport PostCard from './PostCard'; // 경로에 맞게 조정하세요\n\n// 댓글 예시 데이터 (기존 bigComments 복붙)\nconst bigComments = [\n  {\n    id: \"c1\",\n    author: \"user23\",\n    content: \"댓글 내용 547\",\n    createdAt: \"2023-07-24T03:54:01.112Z\",\n    replies: [\n      { id: \"r1_1\", author: \"replyUser15\", content: \"답글 내용 196\", createdAt: \"2024-01-05T19:10:14.232Z\" },\n      { id: \"r1_2\", author: \"replyUser84\", content: \"답글 내용 438\", createdAt: \"2025-02-28T11:39:52.821Z\" },\n    ],\n  },\n  {\n    id: \"c2\",\n    author: \"user41\",\n    content: \"댓글 내용 803\",\n    createdAt: \"2023-08-12T12:22:44.639Z\",\n    replies: [],\n  },\n  {\n    id: \"c3\",\n    author: \"user99\",\n    content: \"댓글 내용 142\",\n    createdAt: \"2025-04-16T07:01:12.761Z\",\n    replies: [\n      { id: \"r3_1\", author: \"replyUser56\", content: \"답글 내용 814\", createdAt: \"2025-04-23T17:25:43.372Z\" },\n    ],\n  },\n];\n\n// 여러 게시글 예시 (20개 생성)\nconst samplePosts = Array(100)\n  .fill(null)\n  .map((_, i) => ({\n    id: `post_${i + 1}`,\n    nickname: `홍길동_${i + 1}`,\n    title: `게시글 제목 ${i + 1}`,\n    createdAt: '2025-06-13T10:00:00Z',\n    updatedAt: '2025-06-13T12:00:00Z',\n    contentHtml: `<p>게시글 내용 예시 ${i + 1}. <strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p></p><strong>HTML 가능</strong>합니다.</p>`,\n    thumbnailImage: 'https://via.placeholder.com/600x300',\n    comments: bigComments,\n  }));\n\nexport default function ArticleTest() {\n  const [posts, setPosts] = useState(samplePosts.slice(0, 5)); // 처음 5개만 로드\n  const loadMoreRef = useRef();\n\n  // 다음 게시글 5개 추가 로드\n  const loadMore = useCallback(() => {\n    setPosts((prev) => {\n      if (prev.length >= samplePosts.length) return prev;\n      return [...prev, ...samplePosts.slice(prev.length, prev.length + 5)];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!loadMoreRef.current) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          loadMore();\n        }\n      },\n      { rootMargin: '200px' }\n    );\n\n    observer.observe(loadMoreRef.current);\n\n    return () => {\n      if (loadMoreRef.current) observer.unobserve(loadMoreRef.current);\n    };\n  }, [loadMore]);\n\n  return (\n    <div className=\"max-w-xl mx-auto mt-10 px-4\">\n      {posts.map((post) => (\n        <PostCard key={post.id} post={post} />\n      ))}\n\n      {/* 무한스크롤 감지용 div */}\n      <div ref={loadMoreRef} style={{ height: 1 }} />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}