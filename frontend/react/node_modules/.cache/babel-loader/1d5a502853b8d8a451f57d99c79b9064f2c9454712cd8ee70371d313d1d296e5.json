{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/src/components/ScrollTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport PostCard from \"../postTest/PostCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 420; // PostCard 예상 높이 (필요에 따라 조정)\nconst BUFFER = 40;\nconst samplePost = {\n  nickname: \"홍길동\",\n  title: \"첫 게시글입니다!\",\n  createdAt: \"2025-06-13T10:00:00Z\",\n  updatedAt: \"2025-06-13T12:00:00Z\",\n  contentHtml: `<p>이건 정말 긴 게시글의 예시입니다. <strong>HTML 형식</strong>도 포함돼요.<br>줄바꿈도 됩니다.</p>\n                <p>이미지도 가능하고, 다양한 포맷이 적용될 수 있습니다. 여기에 아주 많은 텍스트가 있다고 가정합시다...</p>`,\n  thumbnailImage: \"https://via.placeholder.com/600x300\",\n  comments: [{\n    id: \"c1\",\n    author: \"철수\",\n    content: \"게시글 잘 읽었습니다!\",\n    createdAt: \"2025-06-13T11:00:00Z\",\n    replies: [{\n      id: \"r1\",\n      author: \"영희\",\n      content: \"저도 동감입니다!\",\n      createdAt: \"2025-06-13T11:15:00Z\"\n    }]\n  }]\n};\n\n// 인덱스에 맞게 samplePost를 복사하는 fakeFetchPost (비동기 모방)\nconst fakeFetchPost = async index => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        ...samplePost,\n        title: `게시글 ${index} - ${samplePost.title}`\n      });\n    }, 100);\n  });\n};\nexport default function ScrollTest() {\n  _s();\n  const [posts, setPosts] = useState(new Map());\n  const [visibleIndexes, setVisibleIndexes] = useState({\n    start: 0,\n    stop: 0\n  });\n  const listRef = useRef(null);\n  useEffect(() => {\n    const loadPostsAround = async (start, stop) => {\n      const newPosts = new Map(posts);\n      for (let i = start; i <= stop; i++) {\n        if (!newPosts.has(i)) {\n          const post = await fakeFetchPost(i);\n          if (post) newPosts.set(i, post);\n        }\n      }\n\n      // BUFFER 범위 밖 게시글 삭제 (메모리 최적화)\n      const min = Math.max(0, start - BUFFER);\n      const max = stop + BUFFER;\n      for (let key of newPosts.keys()) {\n        if (key < min || key > max) newPosts.delete(key);\n      }\n      setPosts(new Map(newPosts));\n    };\n    loadPostsAround(visibleIndexes.start, visibleIndexes.stop);\n  }, [visibleIndexes]);\n  const Row = ({\n    index,\n    style\n  }) => {\n    const post = posts.get(index);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...style,\n        padding: \"10px 0\"\n      },\n      children: post ? /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 20\n        },\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(List, {\n    height: 800,\n    itemCount: 10000,\n    itemSize: ITEM_HEIGHT,\n    width: \"100%\",\n    onItemsRendered: ({\n      visibleStartIndex,\n      visibleStopIndex\n    }) => {\n      setVisibleIndexes({\n        start: visibleStartIndex,\n        stop: visibleStopIndex\n      });\n    },\n    ref: listRef,\n    className: \"scrollbar-none\",\n    children: Row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(ScrollTest, \"xGZX77KQKkiDQGl3A5ZABr6E+Tc=\");\n_c = ScrollTest;\nvar _c;\n$RefreshReg$(_c, \"ScrollTest\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FixedSizeList","List","PostCard","jsxDEV","_jsxDEV","ITEM_HEIGHT","BUFFER","samplePost","nickname","title","createdAt","updatedAt","contentHtml","thumbnailImage","comments","id","author","content","replies","fakeFetchPost","index","Promise","resolve","setTimeout","ScrollTest","_s","posts","setPosts","Map","visibleIndexes","setVisibleIndexes","start","stop","listRef","loadPostsAround","newPosts","i","has","post","set","min","Math","max","key","keys","delete","Row","style","get","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","height","itemCount","itemSize","width","onItemsRendered","visibleStartIndex","visibleStopIndex","ref","className","_c","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/components/ScrollTest.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport PostCard from \"../postTest/PostCard\";\n\nconst ITEM_HEIGHT = 420; // PostCard 예상 높이 (필요에 따라 조정)\nconst BUFFER = 40;\n\nconst samplePost = {\n  nickname: \"홍길동\",\n  title: \"첫 게시글입니다!\",\n  createdAt: \"2025-06-13T10:00:00Z\",\n  updatedAt: \"2025-06-13T12:00:00Z\",\n  contentHtml: `<p>이건 정말 긴 게시글의 예시입니다. <strong>HTML 형식</strong>도 포함돼요.<br>줄바꿈도 됩니다.</p>\n                <p>이미지도 가능하고, 다양한 포맷이 적용될 수 있습니다. 여기에 아주 많은 텍스트가 있다고 가정합시다...</p>`,\n  thumbnailImage: \"https://via.placeholder.com/600x300\",\n  comments: [\n    {\n      id: \"c1\",\n      author: \"철수\",\n      content: \"게시글 잘 읽었습니다!\",\n      createdAt: \"2025-06-13T11:00:00Z\",\n      replies: [\n        {\n          id: \"r1\",\n          author: \"영희\",\n          content: \"저도 동감입니다!\",\n          createdAt: \"2025-06-13T11:15:00Z\",\n        },\n      ],\n    },\n  ],\n};\n\n// 인덱스에 맞게 samplePost를 복사하는 fakeFetchPost (비동기 모방)\nconst fakeFetchPost = async (index) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        ...samplePost,\n        title: `게시글 ${index} - ${samplePost.title}`,\n      });\n    }, 100);\n  });\n};\n\nexport default function ScrollTest() {\n  const [posts, setPosts] = useState(new Map());\n  const [visibleIndexes, setVisibleIndexes] = useState({ start: 0, stop: 0 });\n  const listRef = useRef(null);\n\n  useEffect(() => {\n    const loadPostsAround = async (start, stop) => {\n      const newPosts = new Map(posts);\n\n      for (let i = start; i <= stop; i++) {\n        if (!newPosts.has(i)) {\n          const post = await fakeFetchPost(i);\n          if (post) newPosts.set(i, post);\n        }\n      }\n\n      // BUFFER 범위 밖 게시글 삭제 (메모리 최적화)\n      const min = Math.max(0, start - BUFFER);\n      const max = stop + BUFFER;\n      for (let key of newPosts.keys()) {\n        if (key < min || key > max) newPosts.delete(key);\n      }\n\n      setPosts(new Map(newPosts));\n    };\n\n    loadPostsAround(visibleIndexes.start, visibleIndexes.stop);\n  }, [visibleIndexes]);\n\n  const Row = ({ index, style }) => {\n    const post = posts.get(index);\n\n    return (\n      <div style={{ ...style, padding: \"10px 0\" }}>\n        {post ? <PostCard post={post} /> : <div style={{ padding: 20 }}>로딩 중...</div>}\n      </div>\n    );\n  };\n\n  return (\n    <List\n      height={800}\n      itemCount={10000}\n      itemSize={ITEM_HEIGHT}\n      width=\"100%\"\n      onItemsRendered={({ visibleStartIndex, visibleStopIndex }) => {\n        setVisibleIndexes({ start: visibleStartIndex, stop: visibleStopIndex });\n      }}\n      ref={listRef}\n      className=\"scrollbar-none\"\n    >\n      {Row}\n    </List>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}