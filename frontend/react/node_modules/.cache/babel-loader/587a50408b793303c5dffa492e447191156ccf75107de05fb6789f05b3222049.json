{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/react/src/components/ScrollTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { VariableSizeList as List } from 'react-window';\nimport PostCard from '../postTest/PostCard';\n\n// 예시 데이터 생성 (10,000개)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generatePosts = count => Array.from({\n  length: count\n}, (_, i) => ({\n  id: i,\n  nickname: `유저${i}`,\n  title: `게시글 제목 ${i}`,\n  createdAt: Date.now() - i * 1000000,\n  updatedAt: Date.now() - i * 900000,\n  contentHtml: '<p>이것은 게시글 ' + i + '의 내용입니다. 더보기 펼침 여부에 따라 높이가 달라집니다.</p>',\n  thumbnailImage: i % 3 === 0 ? 'https://picsum.photos/seed/' + i + '/300/150' : null,\n  comments: Array(i % 5).fill(0).map((_, j) => ({\n    id: j,\n    text: `댓글 ${j} 입니다.`\n  }))\n}));\nconst posts = generatePosts(10000);\nexport default function ScrollTest() {\n  _s();\n  const listRef = useRef();\n\n  // index별 높이 상태 (초기 기본값은 200)\n  const [heights, setHeights] = useState({});\n\n  // PostCard에서 높이 변경 통보 받기\n  const setItemHeight = useCallback((index, size) => {\n    setHeights(prev => {\n      var _listRef$current;\n      if (prev[index] === size) return prev;\n      const newHeights = {\n        ...prev,\n        [index]: size\n      };\n      // 높이 변경 시 리스트에 알려줌\n      (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.resetAfterIndex(index);\n      return newHeights;\n    });\n  }, []);\n\n  // 각 아이템 높이 반환, 없으면 기본 200\n  const getItemSize = index => heights[index] || 200;\n  const Row = ({\n    index,\n    style\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: /*#__PURE__*/_jsxDEV(PostCard, {\n        post: posts[index],\n        onHeightChange: height => setItemHeight(index, height)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(List, {\n    ref: listRef,\n    height: 600,\n    width: \"100%\",\n    itemCount: posts.length,\n    itemSize: getItemSize,\n    overscanCount: 5,\n    children: Row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(ScrollTest, \"HY12RS89RDbyPbj17mRchCAyBKY=\");\n_c = ScrollTest;\nvar _c;\n$RefreshReg$(_c, \"ScrollTest\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","VariableSizeList","List","PostCard","jsxDEV","_jsxDEV","generatePosts","count","Array","from","length","_","i","id","nickname","title","createdAt","Date","now","updatedAt","contentHtml","thumbnailImage","comments","fill","map","j","text","posts","ScrollTest","_s","listRef","heights","setHeights","setItemHeight","index","size","prev","_listRef$current","newHeights","current","resetAfterIndex","getItemSize","Row","style","children","post","onHeightChange","height","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","itemCount","itemSize","overscanCount","_c","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/react/src/components/ScrollTest.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { VariableSizeList as List } from 'react-window';\nimport PostCard from '../postTest/PostCard';\n\n// 예시 데이터 생성 (10,000개)\nconst generatePosts = (count) =>\n  Array.from({ length: count }, (_, i) => ({\n    id: i,\n    nickname: `유저${i}`,\n    title: `게시글 제목 ${i}`,\n    createdAt: Date.now() - i * 1000000,\n    updatedAt: Date.now() - i * 900000,\n    contentHtml:\n      '<p>이것은 게시글 ' +\n      i +\n      '의 내용입니다. 더보기 펼침 여부에 따라 높이가 달라집니다.</p>',\n    thumbnailImage: i % 3 === 0 ? 'https://picsum.photos/seed/' + i + '/300/150' : null,\n    comments: Array(i % 5)\n      .fill(0)\n      .map((_, j) => ({ id: j, text: `댓글 ${j} 입니다.` })),\n  }));\n\nconst posts = generatePosts(10000);\n\nexport default function ScrollTest() {\n  const listRef = useRef();\n\n  // index별 높이 상태 (초기 기본값은 200)\n  const [heights, setHeights] = useState({});\n\n  // PostCard에서 높이 변경 통보 받기\n  const setItemHeight = useCallback((index, size) => {\n    setHeights((prev) => {\n      if (prev[index] === size) return prev;\n      const newHeights = { ...prev, [index]: size };\n      // 높이 변경 시 리스트에 알려줌\n      listRef.current?.resetAfterIndex(index);\n      return newHeights;\n    });\n  }, []);\n\n  // 각 아이템 높이 반환, 없으면 기본 200\n  const getItemSize = (index) => heights[index] || 200;\n\n  const Row = ({ index, style }) => {\n    return (\n      <div style={style}>\n        <PostCard\n          post={posts[index]}\n          onHeightChange={(height) => setItemHeight(index, height)}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <List\n      ref={listRef}\n      height={600}\n      width=\"100%\"\n      itemCount={posts.length}\n      itemSize={getItemSize}\n      overscanCount={5}\n    >\n      {Row}\n    </List>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}