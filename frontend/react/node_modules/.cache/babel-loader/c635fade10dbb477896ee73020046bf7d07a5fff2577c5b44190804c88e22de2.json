{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/src/components/PostTemp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, ContentBlock } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\n// 이미지 블록 렌더링 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction imageBlockRenderer(contentBlock) {\n  const type = contentBlock.getType();\n  if (type === \"atomic\") {\n    return {\n      component: MediaComponent,\n      editable: false\n    };\n  }\n  return null;\n}\n\n// 이미지 컴포넌트: atomic 블록을 img 태그로 변환\nfunction MediaComponent({\n  block,\n  contentState\n}) {\n  const entityKey = block.getEntityAt(0);\n  const entity = contentState.getEntity(entityKey);\n  const {\n    src,\n    alt,\n    height,\n    width\n  } = entity.getData();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: src,\n      alt: alt || \"\",\n      style: {\n        height: height || \"auto\",\n        width: width || \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_c = MediaComponent;\nconst PostTemp = () => {\n  _s();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // 에디터 상태 변경 핸들러\n  const onEditorStateChange = state => {\n    setEditorState(state);\n  };\n\n  // 이미지 업로드 함수 (서버에 POST, 응답에 이미지 URL 포함)\n  const uploadImageCallback = file => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    return fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData\n    }).then(res => res.json()).then(data => {\n      if (!data.url) {\n        return Promise.reject(\"No url returned from server\");\n      }\n      return {\n        data: {\n          link: data.url\n        }\n      };\n    }).catch(error => {\n      console.error(\"이미지 업로드 실패:\", error);\n      return Promise.reject(error);\n    });\n  };\n\n  // 글쓰기 전송 버튼 클릭 시\n  const handleSubmit = () => {\n    const contentState = editorState.getCurrentContent();\n    const rawContent = convertToRaw(contentState);\n    const htmlContent = draftToHtml(rawContent);\n    console.log(\"entityMap:\", rawContent.entityMap);\n    console.log(\"작성된 HTML:\", htmlContent);\n\n    // 서버로 htmlContent 전송 로직 추가 가능\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 800,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      onEditorStateChange: onEditorStateChange,\n      wrapperClassName: \"demo-wrapper\",\n      editorClassName: \"demo-editor\",\n      toolbar: {\n        image: {\n          uploadCallback: uploadImageCallback,\n          previewImage: true,\n          alt: {\n            present: true,\n            mandatory: false\n          }\n        }\n      },\n      customBlockRenderFunc: imageBlockRenderer // 이미지 atomic 블록 커스텀 렌더러\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: 20,\n        padding: \"10px 20px\",\n        backgroundColor: \"#4F46E5\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: 5,\n        cursor: \"pointer\"\n      },\n      onClick: handleSubmit,\n      children: \"\\uAE00 \\uC5C5\\uB85C\\uB4DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(PostTemp, \"wG9VLOnpYRUB9A7+mcW2q9Lv0c0=\");\n_c2 = PostTemp;\nexport default PostTemp;\nvar _c, _c2;\n$RefreshReg$(_c, \"MediaComponent\");\n$RefreshReg$(_c2, \"PostTemp\");","map":{"version":3,"names":["React","useState","Editor","EditorState","convertToRaw","ContentBlock","draftToHtml","jsxDEV","_jsxDEV","imageBlockRenderer","contentBlock","type","getType","component","MediaComponent","editable","block","contentState","entityKey","getEntityAt","entity","getEntity","src","alt","height","width","getData","children","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","PostTemp","_s","editorState","setEditorState","createEmpty","onEditorStateChange","state","uploadImageCallback","file","formData","FormData","append","fetch","method","body","then","res","json","data","url","Promise","reject","link","catch","error","console","handleSubmit","getCurrentContent","rawContent","htmlContent","log","entityMap","maxWidth","margin","wrapperClassName","editorClassName","toolbar","image","uploadCallback","previewImage","present","mandatory","customBlockRenderFunc","marginTop","padding","backgroundColor","color","border","borderRadius","cursor","onClick","_c2","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/components/PostTemp.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, ContentBlock } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\n// 이미지 블록 렌더링 함수\nfunction imageBlockRenderer(contentBlock) {\n  const type = contentBlock.getType();\n  if (type === \"atomic\") {\n    return {\n      component: MediaComponent,\n      editable: false,\n    };\n  }\n  return null;\n}\n\n// 이미지 컴포넌트: atomic 블록을 img 태그로 변환\nfunction MediaComponent({ block, contentState }) {\n  const entityKey = block.getEntityAt(0);\n  const entity = contentState.getEntity(entityKey);\n  const { src, alt, height, width } = entity.getData();\n\n  return (\n    <div>\n      <img\n        src={src}\n        alt={alt || \"\"}\n        style={{ height: height || \"auto\", width: width || \"auto\" }}\n      />\n    </div>\n  );\n}\n\nconst PostTemp = () => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // 에디터 상태 변경 핸들러\n  const onEditorStateChange = (state) => {\n    setEditorState(state);\n  };\n\n  // 이미지 업로드 함수 (서버에 POST, 응답에 이미지 URL 포함)\n  const uploadImageCallback = (file) => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    return fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (!data.url) {\n          return Promise.reject(\"No url returned from server\");\n        }\n        return { data: { link: data.url } };\n      })\n      .catch((error) => {\n        console.error(\"이미지 업로드 실패:\", error);\n        return Promise.reject(error);\n      });\n  };\n\n  // 글쓰기 전송 버튼 클릭 시\n  const handleSubmit = () => {\n    const contentState = editorState.getCurrentContent();\n    const rawContent = convertToRaw(contentState);\n    const htmlContent = draftToHtml(rawContent);\n\n    console.log(\"entityMap:\", rawContent.entityMap);\n    console.log(\"작성된 HTML:\", htmlContent);\n\n    // 서버로 htmlContent 전송 로직 추가 가능\n  };\n\n  return (\n    <div style={{ maxWidth: 800, margin: \"auto\" }}>\n      <h2>게시글 작성</h2>\n      <Editor\n        editorState={editorState}\n        onEditorStateChange={onEditorStateChange}\n        wrapperClassName=\"demo-wrapper\"\n        editorClassName=\"demo-editor\"\n        toolbar={{\n          image: {\n            uploadCallback: uploadImageCallback,\n            previewImage: true,\n            alt: { present: true, mandatory: false },\n          },\n        }}\n        customBlockRenderFunc={imageBlockRenderer} // 이미지 atomic 블록 커스텀 렌더러\n      />\n      <button\n        style={{\n          marginTop: 20,\n          padding: \"10px 20px\",\n          backgroundColor: \"#4F46E5\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: 5,\n          cursor: \"pointer\",\n        }}\n        onClick={handleSubmit}\n      >\n        글 업로드\n      </button>\n    </div>\n  );\n};\n\nexport default PostTemp;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,WAAW,EAAEC,YAAY,EAAEC,YAAY,QAAQ,UAAU;AAClE,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAO,kDAAkD;;AAEzD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,kBAAkBA,CAACC,YAAY,EAAE;EACxC,MAAMC,IAAI,GAAGD,YAAY,CAACE,OAAO,CAAC,CAAC;EACnC,IAAID,IAAI,KAAK,QAAQ,EAAE;IACrB,OAAO;MACLE,SAAS,EAAEC,cAAc;MACzBC,QAAQ,EAAE;IACZ,CAAC;EACH;EACA,OAAO,IAAI;AACb;;AAEA;AACA,SAASD,cAAcA,CAAC;EAAEE,KAAK;EAAEC;AAAa,CAAC,EAAE;EAC/C,MAAMC,SAAS,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC,CAAC;EACtC,MAAMC,MAAM,GAAGH,YAAY,CAACI,SAAS,CAACH,SAAS,CAAC;EAChD,MAAM;IAAEI,GAAG;IAAEC,GAAG;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGL,MAAM,CAACM,OAAO,CAAC,CAAC;EAEpD,oBACElB,OAAA;IAAAmB,QAAA,eACEnB,OAAA;MACEc,GAAG,EAAEA,GAAI;MACTC,GAAG,EAAEA,GAAG,IAAI,EAAG;MACfK,KAAK,EAAE;QAAEJ,MAAM,EAAEA,MAAM,IAAI,MAAM;QAAEC,KAAK,EAAEA,KAAK,IAAI;MAAO;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACC,EAAA,GAdQnB,cAAc;AAgBvB,MAAMoB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGpC,QAAQ,CAACE,WAAW,CAACmC,WAAW,CAAC,CAAC,CAAC;;EAEzE;EACA,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;IACrCH,cAAc,CAACG,KAAK,CAAC;EACvB,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAIC,IAAI,IAAK;IACpC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;IAE9B,OAAOI,KAAK,CAAC,8BAA8B,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEL;IACR,CAAC,CAAC,CACCM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE;QACb,OAAOC,OAAO,CAACC,MAAM,CAAC,6BAA6B,CAAC;MACtD;MACA,OAAO;QAAEH,IAAI,EAAE;UAAEI,IAAI,EAAEJ,IAAI,CAACC;QAAI;MAAE,CAAC;IACrC,CAAC,CAAC,CACDI,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnC,OAAOJ,OAAO,CAACC,MAAM,CAACG,KAAK,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAM3C,YAAY,GAAGmB,WAAW,CAACyB,iBAAiB,CAAC,CAAC;IACpD,MAAMC,UAAU,GAAG1D,YAAY,CAACa,YAAY,CAAC;IAC7C,MAAM8C,WAAW,GAAGzD,WAAW,CAACwD,UAAU,CAAC;IAE3CH,OAAO,CAACK,GAAG,CAAC,YAAY,EAAEF,UAAU,CAACG,SAAS,CAAC;IAC/CN,OAAO,CAACK,GAAG,CAAC,WAAW,EAAED,WAAW,CAAC;;IAErC;EACF,CAAC;EAED,oBACEvD,OAAA;IAAKoB,KAAK,EAAE;MAAEsC,QAAQ,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAxC,QAAA,gBAC5CnB,OAAA;MAAAmB,QAAA,EAAI;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfxB,OAAA,CAACN,MAAM;MACLkC,WAAW,EAAEA,WAAY;MACzBG,mBAAmB,EAAEA,mBAAoB;MACzC6B,gBAAgB,EAAC,cAAc;MAC/BC,eAAe,EAAC,aAAa;MAC7BC,OAAO,EAAE;QACPC,KAAK,EAAE;UACLC,cAAc,EAAE/B,mBAAmB;UACnCgC,YAAY,EAAE,IAAI;UAClBlD,GAAG,EAAE;YAAEmD,OAAO,EAAE,IAAI;YAAEC,SAAS,EAAE;UAAM;QACzC;MACF,CAAE;MACFC,qBAAqB,EAAEnE,kBAAmB,CAAC;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFxB,OAAA;MACEoB,KAAK,EAAE;QACLiD,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE,WAAW;QACpBC,eAAe,EAAE,SAAS;QAC1BC,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE,MAAM;QACdC,YAAY,EAAE,CAAC;QACfC,MAAM,EAAE;MACV,CAAE;MACFC,OAAO,EAAExB,YAAa;MAAAjC,QAAA,EACvB;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACG,EAAA,CA3EID,QAAQ;AAAAmD,GAAA,GAARnD,QAAQ;AA6Ed,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAoD,GAAA;AAAAC,YAAA,CAAArD,EAAA;AAAAqD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}