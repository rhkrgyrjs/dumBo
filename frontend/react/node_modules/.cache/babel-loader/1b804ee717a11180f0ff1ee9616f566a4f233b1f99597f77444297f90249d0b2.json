{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/src/components/PostTemp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, Modifier, AtomicBlockUtils, ContentState, convertFromHTML, CompositeDecorator } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\n// 이미지 삽입을 위한 사용자 정의 block renderer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction imageBlockRenderer(contentBlock) {\n  if (contentBlock.getType() === \"atomic\") {\n    return {\n      component: MediaComponent,\n      editable: false\n    };\n  }\n  return null;\n}\nfunction MediaComponent(props) {\n  const entity = props.contentState.getEntity(props.block.getEntityAt(0));\n  const {\n    src,\n    alt\n  } = entity.getData();\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: src,\n    alt: alt || \"\",\n    style: {\n      maxWidth: \"100%\",\n      height: \"auto\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_c = MediaComponent;\nconst PostTemp = () => {\n  _s();\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  // 임시 이미지 파일들 { id, file, localUrl } 배열로 관리\n  const [imageFiles, setImageFiles] = useState([]);\n\n  // 로컬 이미지 임시 URL 생성용 카운터\n  const imgIdRef = useRef(0);\n\n  // 에디터 상태 업데이트 핸들러\n  const onEditorStateChange = state => {\n    setEditorState(state);\n  };\n\n  // 이미지 파일을 선택하면 서버 업로드는 하지 않고 임시 URL로 에디터에 삽입\n  const addImage = file => {\n    const id = imgIdRef.current++;\n    const localUrl = URL.createObjectURL(file);\n    setImageFiles(prev => [...prev, {\n      id,\n      file,\n      localUrl\n    }]);\n\n    // 에디터에 atomic block 으로 이미지 삽입\n    const contentState = editorState.getCurrentContent();\n    const contentStateWithEntity = contentState.createEntity(\"IMAGE\", \"IMMUTABLE\", {\n      src: localUrl\n    });\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n    const newEditorState = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, \" \");\n    setEditorState(newEditorState);\n  };\n\n  // 에디터 툴바의 이미지 업로드 핸들러: 서버 업로드 없이 addImage 호출\n  const uploadImageCallback = file => {\n    addImage(file);\n    // uploadCallback 은 반드시 Promise 형태여야 하므로 빈 객체 반환\n    return Promise.resolve({\n      data: {\n        link: \"\"\n      }\n    });\n  };\n\n  // 글 작성 버튼 클릭 시 이미지 파일들을 서버에 업로드 후 에디터 내 이미지 src 교체하고 최종 HTML 생성\n  const handleSubmit = async () => {\n    const rawContent = convertToRaw(editorState.getCurrentContent());\n\n    // 1) 서버에 이미지 파일 업로드\n    // 이미지 개수만큼 업로드 후 서버 URL 배열 반환\n    const uploadedImages = await Promise.all(imageFiles.map(async ({\n      file,\n      localUrl\n    }) => {\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      try {\n        const res = await fetch(\"http://localhost:5000/upload\", {\n          method: \"POST\",\n          body: formData\n        });\n        const data = await res.json();\n        if (!data.url) throw new Error(\"No url from server\");\n        return {\n          localUrl,\n          serverUrl: data.url\n        };\n      } catch (error) {\n        console.error(\"이미지 업로드 실패:\", error);\n        return {\n          localUrl,\n          serverUrl: localUrl\n        }; // 실패 시 임시 URL 유지\n      }\n    }));\n\n    // 2) 에디터 내 entityMap 이미지 src 를 서버 URL로 교체\n    const newEntityMap = {\n      ...rawContent.entityMap\n    };\n\n    // entityMap key가 문자열 숫자임에 유의\n    Object.entries(newEntityMap).forEach(([key, entity]) => {\n      if (entity.type === \"IMAGE\") {\n        // 현재 src\n        const oldSrc = entity.data.src;\n        // 새 URL 찾아서 교체\n        const match = uploadedImages.find(img => img.localUrl === oldSrc);\n        if (match) {\n          newEntityMap[key] = {\n            ...entity,\n            data: {\n              ...entity.data,\n              src: match.serverUrl\n            }\n          };\n        }\n      }\n    });\n\n    // 3) entityMap 교체해서 새 contentState 생성 후 HTML 변환\n    const newRawContent = {\n      ...rawContent,\n      entityMap: newEntityMap\n    };\n    const htmlContent = draftToHtml(newRawContent);\n    console.log(\"최종 HTML:\", htmlContent);\n\n    // 여기서 htmlContent를 서버에 글 작성 API 등으로 전송하세요\n\n    alert(\"글 작성 완료!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 800,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131 (\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC \\uC9C0\\uC5F0)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      onEditorStateChange: onEditorStateChange,\n      wrapperClassName: \"demo-wrapper\",\n      editorClassName: \"demo-editor\",\n      toolbar: {\n        image: {\n          uploadCallback: uploadImageCallback,\n          previewImage: true,\n          alt: {\n            present: true,\n            mandatory: false\n          },\n          inputAccept: \"image/*\"\n        }\n      },\n      customBlockRenderFunc: imageBlockRenderer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: 20,\n        padding: \"10px 20px\",\n        backgroundColor: \"#4F46E5\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: 5,\n        cursor: \"pointer\"\n      },\n      onClick: handleSubmit,\n      children: \"\\uAE00 \\uC5C5\\uB85C\\uB4DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(PostTemp, \"MV7MP4e1Iny/paF+jfK6JwHyA0g=\");\n_c2 = PostTemp;\nexport default PostTemp;\nvar _c, _c2;\n$RefreshReg$(_c, \"MediaComponent\");\n$RefreshReg$(_c2, \"PostTemp\");","map":{"version":3,"names":["React","useState","useRef","Editor","EditorState","convertToRaw","Modifier","AtomicBlockUtils","ContentState","convertFromHTML","CompositeDecorator","draftToHtml","jsxDEV","_jsxDEV","imageBlockRenderer","contentBlock","getType","component","MediaComponent","editable","props","entity","contentState","getEntity","block","getEntityAt","src","alt","getData","style","maxWidth","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","PostTemp","_s","editorState","setEditorState","createEmpty","imageFiles","setImageFiles","imgIdRef","onEditorStateChange","state","addImage","file","id","current","localUrl","URL","createObjectURL","prev","getCurrentContent","contentStateWithEntity","createEntity","entityKey","getLastCreatedEntityKey","newEditorState","insertAtomicBlock","uploadImageCallback","Promise","resolve","data","link","handleSubmit","rawContent","uploadedImages","all","map","formData","FormData","append","res","fetch","method","body","json","url","Error","serverUrl","error","console","newEntityMap","entityMap","Object","entries","forEach","key","type","oldSrc","match","find","img","newRawContent","htmlContent","log","alert","margin","children","wrapperClassName","editorClassName","toolbar","image","uploadCallback","previewImage","present","mandatory","inputAccept","customBlockRenderFunc","marginTop","padding","backgroundColor","color","border","borderRadius","cursor","onClick","_c2","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/components/PostTemp.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport {\n  EditorState,\n  convertToRaw,\n  Modifier,\n  AtomicBlockUtils,\n  ContentState,\n  convertFromHTML,\n  CompositeDecorator,\n} from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\n// 이미지 삽입을 위한 사용자 정의 block renderer\nfunction imageBlockRenderer(contentBlock) {\n  if (contentBlock.getType() === \"atomic\") {\n    return {\n      component: MediaComponent,\n      editable: false,\n    };\n  }\n  return null;\n}\n\nfunction MediaComponent(props) {\n  const entity = props.contentState.getEntity(\n    props.block.getEntityAt(0)\n  );\n  const { src, alt } = entity.getData();\n  return (\n    <img\n      src={src}\n      alt={alt || \"\"}\n      style={{ maxWidth: \"100%\", height: \"auto\" }}\n    />\n  );\n}\n\nconst PostTemp = () => {\n  const [editorState, setEditorState] = useState(() =>\n    EditorState.createEmpty()\n  );\n  // 임시 이미지 파일들 { id, file, localUrl } 배열로 관리\n  const [imageFiles, setImageFiles] = useState([]);\n\n  // 로컬 이미지 임시 URL 생성용 카운터\n  const imgIdRef = useRef(0);\n\n  // 에디터 상태 업데이트 핸들러\n  const onEditorStateChange = (state) => {\n    setEditorState(state);\n  };\n\n  // 이미지 파일을 선택하면 서버 업로드는 하지 않고 임시 URL로 에디터에 삽입\n  const addImage = (file) => {\n    const id = imgIdRef.current++;\n    const localUrl = URL.createObjectURL(file);\n    setImageFiles((prev) => [...prev, { id, file, localUrl }]);\n\n    // 에디터에 atomic block 으로 이미지 삽입\n    const contentState = editorState.getCurrentContent();\n    const contentStateWithEntity = contentState.createEntity(\n      \"IMAGE\",\n      \"IMMUTABLE\",\n      { src: localUrl }\n    );\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n    const newEditorState = AtomicBlockUtils.insertAtomicBlock(\n      editorState,\n      entityKey,\n      \" \"\n    );\n    setEditorState(newEditorState);\n  };\n\n  // 에디터 툴바의 이미지 업로드 핸들러: 서버 업로드 없이 addImage 호출\n  const uploadImageCallback = (file) => {\n    addImage(file);\n    // uploadCallback 은 반드시 Promise 형태여야 하므로 빈 객체 반환\n    return Promise.resolve({ data: { link: \"\" } });\n  };\n\n  // 글 작성 버튼 클릭 시 이미지 파일들을 서버에 업로드 후 에디터 내 이미지 src 교체하고 최종 HTML 생성\n  const handleSubmit = async () => {\n    const rawContent = convertToRaw(editorState.getCurrentContent());\n\n    // 1) 서버에 이미지 파일 업로드\n    // 이미지 개수만큼 업로드 후 서버 URL 배열 반환\n    const uploadedImages = await Promise.all(\n      imageFiles.map(async ({ file, localUrl }) => {\n        const formData = new FormData();\n        formData.append(\"image\", file);\n        try {\n          const res = await fetch(\"http://localhost:5000/upload\", {\n            method: \"POST\",\n            body: formData,\n          });\n          const data = await res.json();\n          if (!data.url) throw new Error(\"No url from server\");\n          return { localUrl, serverUrl: data.url };\n        } catch (error) {\n          console.error(\"이미지 업로드 실패:\", error);\n          return { localUrl, serverUrl: localUrl }; // 실패 시 임시 URL 유지\n        }\n      })\n    );\n\n    // 2) 에디터 내 entityMap 이미지 src 를 서버 URL로 교체\n    const newEntityMap = { ...rawContent.entityMap };\n\n    // entityMap key가 문자열 숫자임에 유의\n    Object.entries(newEntityMap).forEach(([key, entity]) => {\n      if (entity.type === \"IMAGE\") {\n        // 현재 src\n        const oldSrc = entity.data.src;\n        // 새 URL 찾아서 교체\n        const match = uploadedImages.find(\n          (img) => img.localUrl === oldSrc\n        );\n        if (match) {\n          newEntityMap[key] = {\n            ...entity,\n            data: { ...entity.data, src: match.serverUrl },\n          };\n        }\n      }\n    });\n\n    // 3) entityMap 교체해서 새 contentState 생성 후 HTML 변환\n    const newRawContent = {\n      ...rawContent,\n      entityMap: newEntityMap,\n    };\n\n    const htmlContent = draftToHtml(newRawContent);\n\n    console.log(\"최종 HTML:\", htmlContent);\n\n    // 여기서 htmlContent를 서버에 글 작성 API 등으로 전송하세요\n\n    alert(\"글 작성 완료!\");\n  };\n\n  return (\n    <div style={{ maxWidth: 800, margin: \"auto\" }}>\n      <h2>게시글 작성 (이미지 업로드 지연)</h2>\n      <Editor\n        editorState={editorState}\n        onEditorStateChange={onEditorStateChange}\n        wrapperClassName=\"demo-wrapper\"\n        editorClassName=\"demo-editor\"\n        toolbar={{\n          image: {\n            uploadCallback: uploadImageCallback,\n            previewImage: true,\n            alt: { present: true, mandatory: false },\n            inputAccept: \"image/*\",\n          },\n        }}\n        customBlockRenderFunc={imageBlockRenderer}\n      />\n      <button\n        style={{\n          marginTop: 20,\n          padding: \"10px 20px\",\n          backgroundColor: \"#4F46E5\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: 5,\n          cursor: \"pointer\",\n        }}\n        onClick={handleSubmit}\n      >\n        글 업로드\n      </button>\n    </div>\n  );\n};\n\nexport default PostTemp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}