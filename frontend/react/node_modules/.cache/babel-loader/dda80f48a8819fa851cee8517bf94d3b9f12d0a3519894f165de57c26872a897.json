{"ast":null,"code":"var _jsxFileName = \"/home/hyogun/\\uBC14\\uD0D5\\uD654\\uBA74/dumbo/frontend/src/components/PostTemp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostTemp = () => {\n  _s();\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // 업로드된 이미지 파일과 임시 URL 저장\n  const [imageFiles, setImageFiles] = useState([]); // { file, localUrl }\n\n  // 에디터 상태 변경 핸들러\n  const onEditorStateChange = state => {\n    setEditorState(state);\n  };\n\n  // 이미지 업로드 콜백 (에디터 내부 이미지 삽입용)\n  // 실제 서버 업로드는 하지 않고, 로컬 URL만 리턴해 미리보기 처리\n  const uploadImageCallback = file => {\n    const localUrl = URL.createObjectURL(file);\n    setImageFiles(prev => [...prev, {\n      file,\n      localUrl\n    }]);\n    return Promise.resolve({\n      data: {\n        link: localUrl\n      }\n    });\n  };\n\n  // 서버에 이미지 업로드 함수 (파일 하나씩 업로드)\n  const uploadImageToServer = async file => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    const res = await fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData\n    });\n    if (!res.ok) throw new Error(\"Image upload failed\");\n    const data = await res.json();\n    if (!data.url) throw new Error(\"No URL returned from server\");\n    return data.url;\n  };\n\n  // 글쓰기 버튼 클릭 시 실행 함수\n  const handleSubmit = async () => {\n    try {\n      const contentState = editorState.getCurrentContent();\n      let rawContent = convertToRaw(contentState);\n\n      // 이미지 파일과 에디터 내 임시 URL 매칭 후, 서버 업로드\n      // 그리고 entityMap의 src를 서버 URL로 교체\n      const entityMap = rawContent.entityMap;\n\n      // Map localUrl => serverUrl\n      const urlMap = {};\n      for (let key in entityMap) {\n        const entity = entityMap[key];\n        if (entity.type === \"IMAGE\") {\n          const localSrc = entity.data.src;\n          // imageFiles에서 localUrl 찾기\n          const imgObj = imageFiles.find(img => img.localUrl === localSrc);\n          if (imgObj) {\n            // 서버에 업로드 후 실제 URL 받기\n            const serverUrl = await uploadImageToServer(imgObj.file);\n            urlMap[localSrc] = serverUrl;\n            // 교체\n            entityMap[key].data.src = serverUrl;\n          }\n        }\n      }\n\n      // 교체 완료된 rawContent를 다시 HTML로 변환\n      const htmlContent = draftToHtml(rawContent);\n      console.log(\"업로드된 이미지 URL 맵:\", urlMap);\n      console.log(\"작성된 HTML:\", htmlContent);\n\n      // TODO: 여기서 htmlContent를 실제 게시글 저장 서버에 전송\n\n      alert(\"글 작성이 완료되었습니다!\");\n      // 초기화\n      setEditorState(EditorState.createEmpty());\n      setImageFiles([]);\n    } catch (error) {\n      console.error(\"글 작성 실패:\", error);\n      alert(\"글 작성 중 오류가 발생했습니다.\");\n    }\n  };\n\n  // 이미지 블록 렌더러 (에디터 내부에서 이미지 표시용)\n  const imageBlockRenderer = contentBlock => {\n    if (contentBlock.getType() === \"atomic\") {\n      return {\n        component: MediaComponent,\n        editable: false\n      };\n    }\n    return null;\n  };\n\n  // 이미지 렌더 컴포넌트\n  const MediaComponent = props => {\n    const entity = props.contentState.getEntity(props.block.getEntityAt(0));\n    const {\n      src,\n      alt,\n      height,\n      width\n    } = entity.getData();\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: src,\n      alt: alt || \"\",\n      style: {\n        height: height || \"auto\",\n        width: width || \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 800,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      onEditorStateChange: onEditorStateChange,\n      wrapperClassName: \"demo-wrapper\",\n      editorClassName: \"demo-editor\",\n      toolbar: {\n        image: {\n          uploadCallback: uploadImageCallback,\n          previewImage: true,\n          alt: {\n            present: true,\n            mandatory: false\n          }\n        }\n      },\n      customBlockRenderFunc: imageBlockRenderer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: 20,\n        padding: \"10px 20px\",\n        backgroundColor: \"#4F46E5\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: 5,\n        cursor: \"pointer\"\n      },\n      onClick: handleSubmit,\n      children: \"\\uAE00 \\uC5C5\\uB85C\\uB4DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(PostTemp, \"Y6cjcXezSMW/39rWyEt1GHr/wao=\");\n_c = PostTemp;\nexport default PostTemp;\nvar _c;\n$RefreshReg$(_c, \"PostTemp\");","map":{"version":3,"names":["React","useState","Editor","EditorState","convertToRaw","Modifier","draftToHtml","jsxDEV","_jsxDEV","PostTemp","_s","editorState","setEditorState","createEmpty","imageFiles","setImageFiles","onEditorStateChange","state","uploadImageCallback","file","localUrl","URL","createObjectURL","prev","Promise","resolve","data","link","uploadImageToServer","formData","FormData","append","res","fetch","method","body","ok","Error","json","url","handleSubmit","contentState","getCurrentContent","rawContent","entityMap","urlMap","key","entity","type","localSrc","src","imgObj","find","img","serverUrl","htmlContent","console","log","alert","error","imageBlockRenderer","contentBlock","getType","component","MediaComponent","editable","props","getEntity","block","getEntityAt","alt","height","width","getData","style","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","margin","children","wrapperClassName","editorClassName","toolbar","image","uploadCallback","previewImage","present","mandatory","customBlockRenderFunc","marginTop","padding","backgroundColor","color","border","borderRadius","cursor","onClick","_c","$RefreshReg$"],"sources":["/home/hyogun/바탕화면/dumbo/frontend/src/components/PostTemp.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst PostTemp = () => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // 업로드된 이미지 파일과 임시 URL 저장\n  const [imageFiles, setImageFiles] = useState([]); // { file, localUrl }\n\n  // 에디터 상태 변경 핸들러\n  const onEditorStateChange = (state) => {\n    setEditorState(state);\n  };\n\n  // 이미지 업로드 콜백 (에디터 내부 이미지 삽입용)\n  // 실제 서버 업로드는 하지 않고, 로컬 URL만 리턴해 미리보기 처리\n  const uploadImageCallback = (file) => {\n    const localUrl = URL.createObjectURL(file);\n    setImageFiles((prev) => [...prev, { file, localUrl }]);\n\n    return Promise.resolve({ data: { link: localUrl } });\n  };\n\n  // 서버에 이미지 업로드 함수 (파일 하나씩 업로드)\n  const uploadImageToServer = async (file) => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    const res = await fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData,\n    });\n    if (!res.ok) throw new Error(\"Image upload failed\");\n    const data = await res.json();\n    if (!data.url) throw new Error(\"No URL returned from server\");\n    return data.url;\n  };\n\n  // 글쓰기 버튼 클릭 시 실행 함수\n  const handleSubmit = async () => {\n    try {\n      const contentState = editorState.getCurrentContent();\n      let rawContent = convertToRaw(contentState);\n\n      // 이미지 파일과 에디터 내 임시 URL 매칭 후, 서버 업로드\n      // 그리고 entityMap의 src를 서버 URL로 교체\n      const entityMap = rawContent.entityMap;\n\n      // Map localUrl => serverUrl\n      const urlMap = {};\n\n      for (let key in entityMap) {\n        const entity = entityMap[key];\n        if (entity.type === \"IMAGE\") {\n          const localSrc = entity.data.src;\n          // imageFiles에서 localUrl 찾기\n          const imgObj = imageFiles.find((img) => img.localUrl === localSrc);\n          if (imgObj) {\n            // 서버에 업로드 후 실제 URL 받기\n            const serverUrl = await uploadImageToServer(imgObj.file);\n            urlMap[localSrc] = serverUrl;\n            // 교체\n            entityMap[key].data.src = serverUrl;\n          }\n        }\n      }\n\n      // 교체 완료된 rawContent를 다시 HTML로 변환\n      const htmlContent = draftToHtml(rawContent);\n\n      console.log(\"업로드된 이미지 URL 맵:\", urlMap);\n      console.log(\"작성된 HTML:\", htmlContent);\n\n      // TODO: 여기서 htmlContent를 실제 게시글 저장 서버에 전송\n\n      alert(\"글 작성이 완료되었습니다!\");\n      // 초기화\n      setEditorState(EditorState.createEmpty());\n      setImageFiles([]);\n    } catch (error) {\n      console.error(\"글 작성 실패:\", error);\n      alert(\"글 작성 중 오류가 발생했습니다.\");\n    }\n  };\n\n  // 이미지 블록 렌더러 (에디터 내부에서 이미지 표시용)\n  const imageBlockRenderer = (contentBlock) => {\n    if (contentBlock.getType() === \"atomic\") {\n      return {\n        component: MediaComponent,\n        editable: false,\n      };\n    }\n    return null;\n  };\n\n  // 이미지 렌더 컴포넌트\n  const MediaComponent = (props) => {\n    const entity = props.contentState.getEntity(\n      props.block.getEntityAt(0)\n    );\n    const { src, alt, height, width } = entity.getData();\n    return (\n      <img\n        src={src}\n        alt={alt || \"\"}\n        style={{ height: height || \"auto\", width: width || \"auto\" }}\n      />\n    );\n  };\n\n  return (\n    <div style={{ maxWidth: 800, margin: \"auto\" }}>\n      <h2>게시글 작성</h2>\n      <Editor\n        editorState={editorState}\n        onEditorStateChange={onEditorStateChange}\n        wrapperClassName=\"demo-wrapper\"\n        editorClassName=\"demo-editor\"\n        toolbar={{\n          image: {\n            uploadCallback: uploadImageCallback,\n            previewImage: true,\n            alt: { present: true, mandatory: false },\n          },\n        }}\n        customBlockRenderFunc={imageBlockRenderer}\n      />\n      <button\n        style={{\n          marginTop: 20,\n          padding: \"10px 20px\",\n          backgroundColor: \"#4F46E5\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: 5,\n          cursor: \"pointer\",\n        }}\n        onClick={handleSubmit}\n      >\n        글 업로드\n      </button>\n    </div>\n  );\n};\n\nexport default PostTemp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}