< 개발 완료된 기능 >
$ 백엔드 : REST API, 접근할 대상을 명시하고 HTTP method로 요청, 상태 코드와 결과 리턴
 - 유저/게시글/댓글(답글 포함)을 담는 RDBMS DB Schema, 기능 추가에 따라 확장 예정
 - 회원가입
  * 이메일/닉네임/비밀번호 받음
  * 이메일 인증 기능 추가 예정
  * DTO Validation을 통해 각 항목의 형식 검사
  * 아이디/이메일 중복체크 API 지원, 악용을 막기 위해 아이피별 시간당 요청 횟수를 제한하는 방법 생각 중
 - 로그인
  * 토큰 기반(JWT)
  * Access/Refresh Token 분리
  * 액세스 토큰은 Redux 전역 상태(변수)에 저장
  * Refresh Token Rotation 기법 활용
  * Redis에 리프레시 토큰 저장 -> 유효기간이 남은 토큰이라도 서버에 정보가 없다면 유효하지 않은 것으로 판단
  * Set-Cookie 헤더를 통해 리프레시 토큰 저장(보안 이슈), 로그인 유지
  * 게시글/댓글 작성/수정/삭제 시 Access Token을 통한 권한 인증 구현(예정)
 - 로그아웃
  * Redis에 저장된 리프레시 토큰 삭제, Set-Cookie 통해 Refresh Token 담긴 쿠키 만료(삭제), 액세스 토큰 삭제
 - 게시글 작성
  * Elasticsearch에 게시글 본문 저장
  * 키워드를 통한 검색 기능 지원 예정
  * MySQL - Elasticsearch 사이 데이터 정합성 보장(Kafka 통한 업로드, 실패 시 로깅)
 - 게시글 조회
  * 인기 게시글 캐싱(Redis) 구현 예정, 도입 방법(벌크로 저장? 독립적으로 저장?)은 아직 고려 중
  * 커서 기반 무한스크롤 지원 -> 게시글의 작성시각을 메인 커서, 게시글 ID를 서브 서커로 동작
 - 게시글 삭제
  * 역시 Kafka 통해 정합성 유지하며 삭제, 삭제한 게시글과 달린 답글들은 DB에 얼마나 보관해야 할 지 정책에 대한 고민 중
 - 댓글 기능 : 역시 게시글과 비슷함

$ 프론트엔드 : React 기반 SPA, SEO를 위한 게시글 단일 조회 페이지도 지원 예정
 - 페이스북 같은 무한 스크롤 지원하는 SNS 스타일의 UI 지원, 모달을 적극적으로 활용(로그인/회원가입/글쓰기 등 모두 모달로 처리)
 
< 추가해야 할 기능들 >
 - 회원정보 수정, 가입시 이메일 인증, 회원 탈퇴 등 기본적인 기능들
 - 게시글/댓글 수정/삭제 등 아직 구현되지 않은 기본적인 CRUD API들(게시글 삭제/수정 시 이미지 서버에서 특정 이미지 삭제 기능은 Kafka로 구현할 것)
 - UI 수정과 추가되는 기능들에 대응되는 React Component들. 현재 컴포넌트들의 오류 수정과 공통된 기능 추출해 다른 파일로 저장 등
 - Kafka를 통한 알림 기능(특정 유저가 댓글에서 나를 멘션했을 때 알림 기능 등, 알림이 실제로 가는 건 아니고 로그인했을때 알림 스택을 보여주는 식)
 - Oauth2(? 이름을 잘 모름)을 통한 카카오/구글/네이버 등 타 사이트 계정을 통한 로그인
 - Docker를 통한 아키텍쳐 분리 지원(docker-compose.yml 파일을 작성)
 - Docker를 통해 분리한 아키텍쳐의 .env 파일(서버의 아이피 주소나 각 서비스에 걸 비밀번호 등)
 - 게시판의 주제별 분리, 유저에게 게시판 생성 요청을 받는 관리자 전용 페이지 생성
 - WebRTC를 이용한 유저의 실시간 채팅(텍스트, 카메라, 음성) 지원
 - 게시판 별 키워드로 검색 기능(Elasticsearch 사용)
 - 코드 리팩토링(Spring MVC에 맞게 Controller, Service, Domain, Repository 등으로 분리 / React 코드에서 중복 함수 빼놓기 등)
 - Jenkins를 통한 CI/CD 파이프라인 구축하기
 - Controller와 Service 분리하기
 - Controller가 리턴하는 HTTP 상태 코드의 세분화, 메시지로 상세 설명 추가하기
 - DAO는 예외를 안에서 처리해야 하나? 등 객체의 책임을 얼마나 분리할 것인지에 대한 고민
 - 사이드 바 구현(왼쪽, 서랍처럼) -> 눌러서 열면 현재 뜨고 있는 인기 게시글 조회 기능, 즐겨찾기한 게시판의 신규 게시글 등 '바로 눌러서 확인하고 싶은' 요소들을 정렬해 띄워주기, 누르면 해당 게시글을 보여주고, 바로 아래에 더 흥미로운 피드를 볼 수 있게 게시글 조회 페이지가 아닌, 피드로 이동해서 누른 게시글을 보여주기(SNS의 중독성을 극대화하는 UX 설계 방식 채택할 것), 그리고, 신규 게시글이 업로드되었다면 해당 사이드바 아이콘이 반짝이거나 움직이는 등의 요소도 추가하면 좋을 것임
 - 오른쪽에는 어떤 정보를 위치시킬 것인가? 도 고민해봐야 함. 광고?
 - 유저명이나 프로필 사진을 클릭해 해당 유저의 정보 보여줄 수 있는 기능 구현할 것. 그리고 유저가 작성한 피드를 볼 수 있는 기능도 지원할 것. 유저를 우클릭해 바로 채팅을 걸거나, 좀 더 나간 것 같지만 화상 채팅도 걸 수 있는 기능을 지원할 것(1:1)
 - 동영상이나 타 사이트 URL을 첨부해 미리보기를 지원하는 기능? -> 이건 더 생각해 봐야 할 문제
 - README : 포트폴리오로 사용하기 위함. 개발 과정과 도중 든 생각들, 개선 가능 방향성이나 실제 배포에 있어서 기능별 서버 설정 방법 등 전반적인 프로젝트에대한 설명들 포함한 마크다운 형식으로 작성
